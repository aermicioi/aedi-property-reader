/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:

	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi_property_reader.yaml.yaml_container;

import aermicioi.aedi;
import aermicioi.aedi_property_reader.core.generic_convertor_container;
import aermicioi.aedi_property_reader.core.accessor;
import aermicioi.aedi_property_reader.core.convertor_factory;
import aermicioi.aedi_property_reader.yaml.accessor;
import aermicioi.aedi_property_reader.yaml.yaml_factory;
import aermicioi.aedi.storage.locator;
import dyaml;
import std.algorithm;
import std.range;
import std.conv;

class YamlLocator: Locator!(Node) {

	private {
		Node yaml_;
		PropertyAccessor!(Node, Node) accessor_;
	}

	public {
		this(PropertyAccessor!(Node, Node) accessor) {
			this.accessor = accessor;
		}

		@property {
			/**
			Set accessor

			Params:
				accessor = instance responsible for accessing root tag's fields

			Returns:
				typeof(this)
			**/
			typeof(this) accessor(PropertyAccessor!(Node, Node) accessor) @safe nothrow pure {
				this.accessor_ = accessor;

				return this;
			}

			/**
			Get accessor

			Returns:
				PropertyAccessor!(Node, Node)
			**/
			PropertyAccessor!(Node, Node) accessor() @safe nothrow pure {
				return this.accessor_;
			}

			/**
			Set yaml

			Params:
				yaml = the element representing root of yaml document
			Returns:
				typeof(this)
			**/
			typeof(this) yaml(Node yaml) {
				this.yaml_ = yaml;

				return this;
			}

			/**
			Get yaml

			Returns:
				Node
			**/
			inout(Node) yaml() inout {
				return this.yaml_;
			}

			/**
			Get a Node that is associated with key.

			Params:
				identity = the element id.

			Throws:
				NotFoundException in case if the element wasn't found.

			Returns:
				Node element if it is available.
			**/
			Node get(string identity) {

				return this.accessor.access(this.yaml, identity);
			}

			/**
			Check if an element is present in Locator by key id.

			Note:
				This check should be done for elements that locator actually contains, and
				not in chained locator.
			Params:
				identity = identity of element.

			Returns:
				bool true if an element by key is present in Locator.
			**/
			bool has(in string identity) inout {
				return this.accessor_.has(this.yaml_, identity);
			}
		}
	}
}

/**
Generic convertor container version for yaml documents.
**/
alias YamlConvertorContainer = GenericConvertorContainer!(Node, YamlConvertorFactory);