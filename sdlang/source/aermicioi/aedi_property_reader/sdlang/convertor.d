/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:

	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi_property_reader.sdlang.convertor;

import aermicioi.aedi.configurer.annotation.annotation;
import aermicioi.aedi_property_reader.convertor.accessor;
import aermicioi.aedi_property_reader.convertor.convertor;
import aermicioi.aedi_property_reader.convertor.exception;
import aermicioi.aedi_property_reader.convertor.inspector;
import aermicioi.aedi_property_reader.convertor.mapper;
import aermicioi.aedi_property_reader.convertor.placeholder;
import aermicioi.aedi_property_reader.sdlang.accessor;
import aermicioi.aedi_property_reader.sdlang.inspector;
import sdlang;
import sdlang.ast;
import sdlang.token;
import std.conv;
import std.traits;
import std.meta;
import std.exception : enforce;
import std.experimental.allocator;

@component
class TagConvertor : Convertor {

	mixin FromMixin!Tag;
	mixin ToMixin!(AliasSeq!(ValueTypes, Value[]));

	mixin ConvertsFromToMixin DefaultConvertsImplementation;
	mixin EqualToHashToStringOpCmpMixin;

	/**
    ditto
    **/
    bool converts(in Object from, const TypeInfo to) @safe const nothrow {
		if (DefaultConvertsImplementation.converts(from, to)) {

			foreach (value; from.unwrap!Tag.values) {
				if (value.type is to) {
					return true;
				}
			}

			if (to is typeid(Value[])) {
				return true;
			}
		}

		return false;
    }

    /**
    ditto
    **/
    bool converts(in Object from, in Object to) @safe const nothrow {
        return this.converts(from, to.identify);
    }

	/**
    Convert from component to component.

    Params:
        from = original component that is to be converted.
        to = destination object that will be constructed out for original one.
        allocator = optional allocator that could be used to construct to component.
    Throws:
        ConvertorException when there is a converting error
        InvalidArgumentException when arguments passed are not of right type or state
    Returns:
        Resulting converted component.
    **/
    Object convert(in Object from, const TypeInfo to, RCIAllocator allocator = theAllocator) const {
		enforce!ConvertorException(
			this.converts(from, to),
			text("Cannot convert ", from.identify, " to type of ", to, " expected origin type of ", this.from, " and destination types of ", this.to)
		);

		static foreach (ToType; ValueTypes) {
			if (to is typeid(ToType)) {
				return from.unwrap!Tag.expectValue!ToType.pack(from, this, allocator);
			}
		}

		if (to is typeid(Value[])) {
			return from.unwrap!Tag.values.pack(from, this, allocator);
		}

		assert(false, "Code flow should not get here");
	}

    /**
    Destroy component created using this convertor.

    Destroy component created using this convertor.
    Since convertor could potentially allocate memory for
    converted component, only itself is containing history of allocation,
    and therefore it is responsible as well to destroy and free allocated
    memory with allocator.

    Params:
        converted = component that should be destroyed.
        allocator = allocator used to allocate converted component.
    Return:
        true if component is destroyed, false otherwise
    **/
    void destruct(const TypeInfo from, ref Object converted, RCIAllocator allocator = theAllocator) const {
		enforce!ConvertorException(
			this.destroys(from, converted),
			text("Cannot destroy ", converted.identify, ". The value was probably not converted by this convertor")
		);

		static foreach (ToType; ValueTypes) {
			if (converted.identify is typeid(ToType)) {
				converted.unpack!ToType(allocator);
			}
		}

		if (converted.identify is (typeid(Value[]))) {
			converted.unpack!(Value[])(allocator);
		}
	}
}

@component
class AttributeConvertor : Convertor {

	mixin FromMixin!Attribute;
	mixin ToMixin!ValueTypes;

	mixin ConvertsFromToMixin DefaultConvertsImplementation;
	mixin EqualToHashToStringOpCmpMixin;

	/**
    ditto
    **/
    bool converts(in Object from, const TypeInfo to) @safe const nothrow {
		if (DefaultConvertsImplementation.converts(from, to)) {

			return from.unwrap!Attribute.value.type is to;
		}

		return false;
    }

    /**
    ditto
    **/
    bool converts(in Object from, in Object to) @safe const nothrow {
        return this.converts(from, to.identify);
    }

	/**
    Convert from component to component.

    Params:
        from = original component that is to be converted.
        to = destination object that will be constructed out for original one.
        allocator = optional allocator that could be used to construct to component.
    Throws:
        ConvertorException when there is a converting error
        InvalidArgumentException when arguments passed are not of right type or state
    Returns:
        Resulting converted component.
    **/
    Object convert(in Object from, const TypeInfo to, RCIAllocator allocator = theAllocator) const {
		enforce!ConvertorException(
			this.converts(from, to),
			text("Cannot convert ", from.identify, " to type of ", to, " expected origin type of ", this.from, " and destination types of ", this.to)
		);

		static foreach (ToType; ValueTypes) {
			if (to is typeid(ToType)) {
				return from.unwrap!Attribute.value.get!ToType.pack(from, this, allocator);
			}
		}

		assert(false, "Code flow should not reach this point");
	}

    /**
    Destroy component created using this convertor.

    Destroy component created using this convertor.
    Since convertor could potentially allocate memory for
    converted component, only itself is containing history of allocation,
    and therefore it is responsible as well to destroy and free allocated
    memory with allocator.

    Params:
        converted = component that should be destroyed.
        allocator = allocator used to allocate converted component.
    Return:
        true if component is destroyed, false otherwise
    **/
    void destruct(const TypeInfo from, ref Object converted, RCIAllocator allocator = theAllocator) const {
		enforce!ConvertorException(
			this.destroys(from, converted),
			text("Cannot destroy ", converted.identify, ". The value was probably not converted by this convertor")
		);

		static foreach (ToType; ValueTypes) {
			if (converted.identify is typeid(ToType)) {
				converted.unpack!ToType(allocator);
			}
		}
	}
}