/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:

	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi_property_reader.sdlang.sdlang;

import aermicioi.aedi.storage.storage;
import aermicioi.aedi.storage.locator;
import aermicioi.aedi_property_reader.sdlang.accessor;
import aermicioi.aedi_property_reader.core.accessor;
import aermicioi.aedi_property_reader.sdlang.convertor;
import aermicioi.aedi_property_reader.core.convertor;
import aermicioi.aedi_property_reader.core.type_guesser;
import aermicioi.aedi_property_reader.core.document;
import aermicioi.aedi_property_reader.sdlang.type_guesser;
import sdlanguage = sdlang;
import std.experimental.logger;
import std.experimental.allocator;

alias SdlangDocumentContainer = AdvisedDocumentContainer!(SdlangElement, SdlangElement, SdlangConvertor);

/**
Create a convertor container with data source being sdlang document.

Params:
    value = source of data for container to use to construct components.
    accessor = property accessing logic
    guesser = type guesser based on held sdlang value
    allocator = allocator used to allocate converted values
Returns:
    JsonConvertorContainer
**/
auto sdlang(SdlangElement value, PropertyAccessor!SdlangElement accessor, TypeGuesser!SdlangElement guesser, RCIAllocator allocator = theAllocator) {

    SdlangDocumentContainer container = new SdlangDocumentContainer(value);
    container.guesser = guesser;
    container.accessor = accessor;
    container.allocator = allocator;

    return container;
}

/**
ditto
**/
auto sdlang(SdlangElement value, TypeGuesser!SdlangElement guesser, RCIAllocator allocator = theAllocator) {

    return value.sdlang(accessor, guesser, allocator);
}

/**
ditto
**/
auto sdlang(SdlangElement value, RCIAllocator allocator = theAllocator) {

    auto container = value.sdlang(accessor, new SdlangTypeGuesser(), allocator);
    import std.traits : fullyQualifiedName;
    import std.meta : AliasSeq;
    import std.datetime;
    import sdlang.token;

    static foreach (T; AliasSeq!(
        bool,
        string, dchar,
        int, long,
        float, double, real,
        Date, DateTimeFrac, SysTime, DateTimeFracUnknownZone, Duration,
        ubyte[]
    )) {

        container.set(new SdlangConvertor!(T, SdlangElement), fullyQualifiedName!T);
    }

    return container;
}

/**
ditto
**/
auto sdlang(RCIAllocator allocator = theAllocator) {
    import sdlang.ast;

    return SdlangElement(new Tag()).sdlang(allocator);
}

/**
Create a convertor container with data source being sdlang document.

Params:
    pathOrData = path to a sdlang file or sdlang data itself
    returnEmpty = wheter to return or not a locator with empty data source
Returns:
    SdlangConvertorContainer
**/
auto sdlang(string pathOrData, bool returnEmpty = true) {
    import std.file;

    try {

        if (pathOrData.exists) {
            return sdlang(SdlangElement(sdlanguage.parseFile(pathOrData)));
        } else {
            return sdlang(SdlangElement(sdlanguage.parseSource(pathOrData)));
        }
    } catch (sdlanguage.SDLangException e) {
        debug(trace) trace("Error parsing sdlang: ", e);

        if (returnEmpty) {
            debug(trace) trace("Providing empty container");
            return sdlang();
        }

        throw new Exception("Could not create sdlang convertor container from file or content passed in pathOrData: " ~ pathOrData, e);
    }
}

private auto accessor() {
    return dsl(
        new AggregatePropertyAccessor!SdlangElement(
            new TaggedElementPropertyAccessorWrapper!(SdlangElement, SdlangAttributePropertyAccessor)(new SdlangAttributePropertyAccessor),
            new TaggedElementPropertyAccessorWrapper!(SdlangElement, SdlangTagPropertyAccessor)(new SdlangTagPropertyAccessor),
            new TaggedElementPropertyAccessorWrapper!(SdlangElement, SdlangIntegerIndexAccessor)(new SdlangIntegerIndexAccessor)
        ),
        new AggregatePropertyAccessor!SdlangElement(
            new TaggedElementPropertyAccessorWrapper!(SdlangElement, SdlangAttributePropertyAccessor)(new SdlangAttributePropertyAccessor),
            new TaggedElementPropertyAccessorWrapper!(SdlangElement, SdlangTagPropertyAccessor)(new SdlangTagPropertyAccessor),
            new TaggedElementPropertyAccessorWrapper!(SdlangElement, SdlangIntegerIndexAccessor)(new SdlangIntegerIndexAccessor)
        )
    );
}