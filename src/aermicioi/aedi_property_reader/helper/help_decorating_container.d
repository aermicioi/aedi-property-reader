/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:
	
	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi_property_reader.helper.help_decorating_container;

import aermicioi.aedi_property_reader.helper.help_decorating_information_provider;
import aermicioi.aedi_property_reader.helper.help_decorating_exception;
import aermicioi.aedi_property_reader.helper.help_needing_exception;
import aermicioi.aedi.exception.not_found_exception;
import aermicioi.aedi.exception.di_exception;
import aermicioi.aedi.storage.storage;
import aermicioi.aedi.storage.locator;
import aermicioi.aedi.storage.alias_aware;
import aermicioi.aedi.storage.decorator;
import aermicioi.aedi.container.container;
import aermicioi.aedi.factory.factory;
import std.range.interfaces;
import std.typecons;
import std.algorithm;

interface HelpInformationToggable {
    @property {
    	HelpInformationToggable helpEnabled(bool helpEnabled) @safe nothrow;
    }
}

/**
Templated switchable decorated.

Templated switchable decorated. This decorated will
decorate another decorated, and add switching logic 
to it. Depending in which state (on/off) the switching 
decorated is. It will instantiate if the decorated is on, 
and not if decorated is in off mode. This decorated will
inherit following interfaces only and only if the 
T also implements them:
    $(OL
        $(LI Storage!(ObjectFactory, string))
        $(LI Container)
        $(LI AliasAware!string)
    )

Params:
    T = The decorated that switchable decorated will decorate.
   
**/
template HelpDecoratingContainer(T) {
    import std.meta;
    import std.traits;
    import aermicioi.util.traits;
    
    /**
    Set which the switchable decorated will decorate for T. By default
    Locator!() and Switchable is included.
    **/
    alias InheritanceSet = NoDuplicates!(Filter!(
        templateOr!(
            partialSuffixed!(
                isDerived,
                Storage!(ObjectFactory, string)
            ),
            partialSuffixed!(
                isDerived,
                AliasAware!string
            ),
            partialSuffixed!(
                isDerived,
                FactoryLocator!ObjectFactory
            ),
            partialSuffixed!(
                isDerived,
                Container
            )
        ),
        InterfacesTuple!T),
        Locator!(),
        MutableDecorator!T,
        HelpInformationToggable,
    );

    /**
    Templated switchable decorated.
    **/
    class HelpDecoratingContainer : InheritanceSet {
        private {
            T decorated_;
            HelpInformationProvider[] providers_;
            
            bool helpEnabled_;
        }
        
        public {
            
            HelpDecoratingContainer helpEnabled(bool helpEnabled) @safe nothrow {
            	this.helpEnabled_ = helpEnabled;
            
            	return this;
            }
            
            bool helpEnabled() @safe nothrow {
            	return this.helpEnabled_;
            }
            
            /**
            Set the decorated decorated
            
            Params:
                decorated = decorated to be decorated
                
            Returns:
                HelpDecoratingContainer!T decorating decorated.
            **/
            HelpDecoratingContainer!T decorated(T decorated) @safe nothrow {
            	this.decorated_ = decorated;
            
            	return this;
            }
            
            
            /**
            Get the decorated decorated.
            
            Get the decorated decorated.
            
            Returns:
            	inout(T) decorated decorated
            **/
            T decorated() @safe nothrow {
            	return this.decorated_;
            }
            
            HelpDecoratingContainer addHelpProvider(HelpInformationProvider provider) {
            	this.providers_ ~= provider;
            
            	return this;
            }
            
            HelpDecoratingContainer removeHelpProvider(size_t key) {
            	import std.algorithm;
            	this.providers_ = this.providers_.remove(key);
            
            	return this;
            }
            
            HelpInformationProvider getHelpProvider(size_t key) {
                
                if (key >= this.providers_.length) {
                    throw new NotFoundException("Help provider not found");
                }
                
            	return this.providers_[key];
            }
            
            static if (is(T : Container)) {
                
                /**
                Prepare decorated to be used.
                
                Prepare decorated to be used.

                Returns:
                	HelpDecoratingContainer!T decorating decorated
                **/
                HelpDecoratingContainer instantiate() {
                    try {
                        decorated.instantiate();
                    } catch (AediException e) {
                        
                        Throwable t = e;
                        
                        do {
                            HelpDecoratingException signaler = cast(HelpDecoratingException) t;
                            
                            if (signaler !is null) {
                                if (this.helpEnabled) {
                                    throw new HelpNeedingException(this.providers_, signaler.next);
                                }
                            }
                            
                            t = t.next;
                        } while (t !is null);
                        
                        throw e.next;
                    }
                    
                    return this;
                }
            }
            
            static if (is(T : Storage!(ObjectFactory, string))) {
                /**
        		Set factory in decorated by identity.
        		
        		Params:
        			identity = identity of factory.
        			element = factory that is to be saved in decorated.
        			
        		Return:
        			HelpDecoratingContainer!T decorating decorated.
        		**/
                HelpDecoratingContainer!T set(ObjectFactory element, string identity) {
                    decorated.set(element, identity);
                    
                    return this;
                }
                
                /**
                Remove factory from decorated with identity.
                
                Remove factory from decorated with identity. 
                
                Params:
                	identity = the identity of factory to be removed.
                	
            	Return:
            		HelpDecoratingContainer!T decorating decorated
                **/
                HelpDecoratingContainer!T remove(string identity) {
                    decorated.remove(identity);
                    
                    return this;
                }
            }
            
            static if (is(T : AliasAware!string)) {
                /**
                Alias identity to an alias_.
                        
                Params:
                	identity = originial identity which is to be aliased.
                	alias_ = alias of identity.
                	
        		Returns:
        			HelpDecoratingContainer!T decorating decorated
                **/
                HelpDecoratingContainer!T link(string identity, string alias_) {
                    decorated.link(identity, alias_);
                    
                    return this;
                }
                
                /**
                Removes alias.
                
                Params:
                	alias_ = alias to remove.
        
                Returns:
                    HelpDecoratingContainer!T decorating decorated
                **/
                HelpDecoratingContainer!T unlink(string alias_) {
                    decorated.unlink(alias_);
                    
                    return this;
                }
                
                /**
                Resolve an alias to original identity, if possible.
                
                Params:
                	alias_ = alias of original identity
                
                Returns:
                	const(string) the last identity in alias chain if decorated is enabled, or alias_ when not.
                
                **/
                const(string) resolve(in string alias_) const {
                    return decorated_.resolve(alias_);
                }
            }
            
            static if (is(T : FactoryLocator!ObjectFactory)) {
                
                ObjectFactory getFactory(string identity) {
                    return this.decorated.getFactory(identity);
                }
                
                InputRange!(Tuple!(ObjectFactory, string)) getFactories() {
                    return this.decorated.getFactories();
                }
            }
            
            /**
    		Get object that is associated with identity.
    		
    		Params:
    			identity = the object identity.
    			
    		Throws:
    			NotFoundException in case if the object wasn't found or decorated is not enabled.
    		
    		Returns:
    			Object if it is available.
    		**/
            Object get(string identity) {
                
                try {
                    
                    return decorated.get(identity);
                } catch (AediException e) {
                    
                    Throwable t = e;
                    
                    do {
                        HelpDecoratingException signaler = cast(HelpDecoratingException) t;
                        
                        if (signaler !is null) {
                            if (this.helpEnabled) {
                                throw new HelpNeedingException(this.providers_, signaler.next);
                            }
                        }
                        
                        t = t.next;
                    } while (t !is null);
                    
                    throw e.next;
                }
            }
            
            /**
            Check if object is present in HelpDecoratingContainer!T by key identity.
            
            Note:
            	This check should be done for elements that locator actually contains, and
            	not in chained locator (when locator is also a DelegatingLocator) for example.
            Params:
            	identity = identity of object.
            	
        	Returns:
        		bool true if decorated is enabled and has object by identity.
            **/
            bool has(in string identity) inout {
                return decorated_.has(identity);
            }
        }
    }
}