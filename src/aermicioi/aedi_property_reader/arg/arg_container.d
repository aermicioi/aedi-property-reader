/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:
	
	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi_property_reader.arg.arg_container;

import aermicioi.aedi;
import aermicioi.aedi_property_reader.generic_convertor_container;
import aermicioi.aedi_property_reader.env.env_factory;
import std.process;
import std.range;
import std.typecons;
import std.range;

interface HelpMessageFormatter : InputRange!char, OutputRange!HelpMessage {
    
}

interface HelpMessage {
    
    public {
        string identity() @safe nothrow;
        string message() @safe nothrow;
    }
}

/**
A decorating container, that on an exception from decorated container will output
an usage message to output, and halt the operation.
**/
template UsageDecoratingContainer(T) {
    /**
    Set which the switchable container will decorate for T. By default
    Locator!() and Subscribable!ContainerInstantiationEventType is included.
    **/
    alias InheritanceSet = NoDuplicates!(Filter!(
        templateOr!(
            partialSuffixed!(
                isDerived,
                Storage!(ObjectFactory, string)
            ),
            partialSuffixed!(
                isDerived,
                AliasAware!string
            ),
            partialSuffixed!(
                isDerived,
                FactoryLocator!ObjectFactory
            )
        ),
        InterfacesTuple!T),
        Container,
        MutableDecorator!T,
        Decorator!Container,
        Storage!(HelpMessage, string)
    );
    
    class UsageDecoratingContainer : InheritanceSet {
        
        private {
            T decorated_;
            HelpMessageFormatter formatter_;
            OutputRange!char sink_;
            ObjectStorage!(HelpMessage, string) messages;
        }
        
        public {
            @property {
            	UsageDecoratingContainer decorated(T decorated) @safe nothrow {
            		this.decorated_ = decorated;
            	
            		return this;
            	}
            	
            	T decorated() @safe nothrow {
            		return this.decorated_;
            	}
            	
            	UsageDecoratingContainer formatter(type formatter) @safe nothrow {
            		this.formatter_ = formatter;
            	
            		return this;
            	}
            	
            	type formatter() @safe nothrow {
            		return this.formatter_;
            	}
            	
            	UsageDecoratingContainer sink(OutputRange!char sink) @safe nothrow {
            		this.sink_ = sink;
            	
            		return this;
            	}
            	
            	OutputRange!char sink() @safe nothrow {
            		return this.sink_;
            	}
            }
            
            UsageDecoratingContainer set(HelpMessage message, string key) {
            	this.messages.set(message, key);
            
            	return this;
            }
            
            UsageDecoratingContainer remove(string key) {
            	this.messages.remove(key);
            
            	return this;
            }
            
            Object get(string key) {
                try {
                    
                    return this.decorated.get(key);
                } catch(AediException e) {
                    
                    this.print();
                }
            }
            
            bool has(in string key) inout {
                return this.decorated_.has(key);
            }
            
            UsageDecoratingContainer subscribe(
                ContainerInstantiationEventType event,
                void delegate() subscriber
            ) {
                this.subscribers[event] ~= subscriber;
                
                return this;
            }
            
            UsageDecoratingContainer instantiate() {
                
                try {
                    this.decorated.instantiate();
                } catch (AediException e) {
                    
                    this.print();
                }
                
                return this;
            }
            
            static if (is(T : Storage!(ObjectFactory, string))) {

                UsageDecoratingContainer!T set(ObjectFactory element, string identity) {
                    decorated.set(element, identity);
                    
                    return this;
                }
                
                UsageDecoratingContainer!T remove(string identity) {
                    decorated.remove(identity);
                    
                    return this;
                }
            }
            
            static if (is(T : AliasAware!string)) {
                UsageDecoratingContainer!T link(string identity, string alias_) {
                    decorated.link(identity, alias_);
                    
                    return this;
                }
                
                UsageDecoratingContainer!T unlink(string alias_) {
                    decorated.unlink(alias_);
                    
                    return this;
                }
                
                const(string) resolve(in string alias_) const {
                    return decorated_.resolve(alias_);
                }
            }
            
            static if (is(T : FactoryLocator!ObjectFactory)) {
                
                ObjectFactory getFactory(string identity) {
                    return this.decorated.getFactory(identity);
                }
                
                InputRange!(Tuple!(ObjectFactory, string)) getFactories() {
                    return this.decorated.getFactories();
                }
            }
        }
        
        private {
            
            void print() {
                foreach (message; this.messages) {
                    this.formatter.put(message);
                }
                
                put(this.sink, this.formatter);
                
//                    TODO a better solution at handling it should be devised.
                import std.c.process;
                exit(1);
            }
        }
    }
}

class CommandLineArgumentLocator : Locator!(string, string) {
    public {
        
        /**
		Get a command line argument.
		
		Params:
			path = the element id.
			
		Throws:
			NotFoundException in case if the element wasn't found.
		
		Returns:
			string element if it is available.
		**/
        string get(string path) {
            import std.getopt;
            import core.runtime;
            
            string[] args = Runtime.args;
            string argument;
            
            try {
                auto result = getopt(
                    args,
                    config.passThrough, config.required, path, &argument
                );
            } catch (GetOptException e) {
                throw new NotFoundException("Could not find argument in supplied command line arguments identified by: " ~ path);
            }
            
            return argument;
        }
        
        /**
        Check if command line argument is present.
        
        Params:
        	path = identity of element.
        	
    	Returns:
    		bool true if an element by key is present in Locator.
        **/
        bool has(in string path) inout {
            import std.getopt;
            import core.runtime;
            
            string[] args = Runtime.args;
            string argument;
            
            auto result = getopt(
                args,
                config.passThrough, path, &argument
            );
            
            return argument !is null;
        }
    }
}

alias CommandArgumentConvertorContainer = GenericConvertorContainer!(string, StringConvertorFactory);