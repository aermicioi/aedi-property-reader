/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:
	
	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi_property_reader.helper.help_decorating_factory;

import aermicioi.aedi_property_reader.core.convertor_factory;
import aermicioi.aedi.storage.decorator;
import aermicioi.aedi.exception.di_exception;
import aermicioi.aedi.factory.factory;
import aermicioi.aedi.storage.locator;
import std.range;

/**
A decorating factory that on exceptions chains help decorating exception to signal 
help decorating container to throw help messages if enabled.
**/
class HelpDecoratingFactory(T : Factory!Z, Z) : 
    Factory!Z, 
    MutableDecorator!T
{
    private {
        
        T decorated_;
    }
    
    public {
        @property {
			/**
            Set the decorated object for decorator.
            
            Params:
                decorated = decorated data
            
            Returns:
            	this
            **/
            HelpDecoratingFactory!T decorated(T decorated) @safe nothrow {
            	this.decorated_ = decorated;
            
            	return this;
            }
            
			/**
            Get the decorated object.
            
            Returns:
            	T decorated object
            **/
            T decorated() @safe nothrow {
            	return this.decorated_;
            }
            
			/**
    		Get the type info of T that is created.
    		
    		Returns:
    			TypeInfo object of created component.
    		**/
        	TypeInfo type() {
        	    return this.decorated.type;
        	}
        	
			/**
			Set a locator to object.
			
			Params:
				locator = the locator that is set to oject.
			
			Returns:
				LocatorAware.
			**/
        	HelpDecoratingFactory!T locator(Locator!() locator) @safe nothrow {
        		this.decorated.locator = locator;
        	
        		return this;
        	}
        }
        
		/**
		Instantiates component of type Z.
		
		Throws:
			HelpDecoratingException when an exception from underlying factory is thrown.

		Returns:
			Z instantiated component.
		**/
        Z factory() {
            try {
                return this.decorated.factory;
            } catch (Exception e) {
                import aermicioi.aedi_property_reader.helper.help_decorating_exception : HelpDecoratingException;
                
                throw new HelpDecoratingException("Error occured in help managed factory", e);
            }
        }
    }
}

/**
A decorating factory that on exceptions chains help decorating exception to signal 
help decorating container to throw help messages if enabled.
**/
class HelpDecoratingConvertorFactory(T : ConvertorFactory!(FromType, ToType), FromType, ToType) : 
    ConvertorFactory!(FromType, ToType), 
    MutableDecorator!T
{
    private {
        T decorated_;
    }
    
    public {
        @property {

			/**
            Set the decorated object for decorator.
            
            Params:
                decorated = decorated data
            
            Returns:
            	this
            **/
            HelpDecoratingConvertorFactory!T decorated(T decorated) @safe nothrow {
            	this.decorated_ = decorated;
            
            	return this;
            }
            
			/**
            Get the decorated object.
            
            Returns:
            	T decorated object
            **/
            T decorated() @safe nothrow {
            	return this.decorated_;
            }
            
            /**
			Set convertible
			
			Params: 
				convertible = data that the factory should convert into ToType component
			Returns:
				ConvertorFactory!(FromType, ToType)
			**/
        	HelpDecoratingConvertorFactory!T convertible(string convertible) @safe nothrow {
        		this.decorated.convertible = convertible;
        	
        		return this;
        	}
        	
			/**
			Get convertible data
			
			Returns:
				FromType
			**/
        	string convertible() @safe nothrow {
        		return this.decorated.convertible;
        	}
        	
			/**
			Set a locator to object.
			
			Params:
				locator = the locator that is set to oject.
			
			Returns:
				LocatorAware.
			**/
        	HelpDecoratingConvertorFactory!T locator(Locator!() locator) @safe nothrow {
        		this.decorated.locator = locator;
        	
        		return this;
        	}
        	
			/**
    		Get the type info of T that is created.
    		
    		Returns:
    			TypeInfo object of created component.
    		**/
        	TypeInfo type() {
        	    return this.decorated.type;
        	}
        }
        
		/**
		Instantiates component of type ToType.
		
		Throws:
			HelpDecoratingException when an exception from underlying factory is thrown.

		Returns:
			ToType instantiated component.
		**/
        ToType factory() {
            try {
                return this.decorated.factory;
            } catch (Exception e) {
                import aermicioi.aedi_property_reader.helper.help_decorating_exception : HelpDecoratingException;
                
                throw new HelpDecoratingException("Error occured in help managed factory", e);
            }
        }
    }
}