/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:

	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi_property_reader.arg.convertor_configurer;

import aermicioi.aedi_property_reader.arg;
import aermicioi.aedi.storage.locator : Locator;

/**
Create a convertor container with data source being command line arguments.

Params:
    locator = source of data for container to use to construct components.
Returns:
    GetoptConvertorContainer
**/
auto argument() {
    return argument(new GetoptIdentityLocator());
}

/**
ditto
**/
auto argument(Locator!(string, string) locator) {
    auto container = new GetoptConvertorContainer;
    container.locator = locator;
	container.defaultConvertor = factoryDefaultConvertor();

    return container;
}

/**
Implementation of type guessing convertor that is able to guess scalar types from string.

Returns:
	TypeGuessingConvertorFactory!string
**/
auto factoryDefaultConvertor() {
	import aermicioi.aedi_property_reader.core.convertor_factory : ConvertorFactory;
	import aermicioi.aedi_property_reader.core.convertor_factory_impl : TypeGuessingConvertorFactory, ObjectWrappingConvertorFactory;
	import aermicioi.aedi_property_reader.core.type_guesser : StringToScalarConvTypeGuesser;
	import aermicioi.aedi_property_reader.arg.arg_factory : GetoptConvertorFactory;
	import aermicioi.aedi.storage.object_storage : ObjectStorage;
	import std.meta : AliasSeq;

	auto convertors = new ObjectStorage!(ConvertorFactory!(string, Object), TypeInfo)();
	auto factory = new TypeGuessingConvertorFactory!string;
	factory.guesser = new StringToScalarConvTypeGuesser();
	factory.convertors = convertors;

	foreach (Type; AliasSeq!(
		bool, ubyte, ushort, uint, ulong, byte, short, int, long, float, double,
		bool[], ubyte[], ushort[], uint[], ulong[], byte[], short[], int[], long[], float[], double[]
	)) {

		convertors.set(
			new ObjectWrappingConvertorFactory!(GetoptConvertorFactory!Type)(new GetoptConvertorFactory!Type),
			typeid(Type)
		);
	}

	return factory;
}