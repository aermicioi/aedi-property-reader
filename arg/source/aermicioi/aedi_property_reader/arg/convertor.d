/**
License:
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

Authors:
    Alexandru Ermicioi
**/
module aermicioi.aedi_property_reader.arg.convertor;

import std.string;
import std.algorithm;
import std.array;
import std.traits;
import std.conv;
import std.getopt;
import std.range;
import std.experimental.allocator;
import aermicioi.aedi_property_reader.convertor.convertor;
import aermicioi.aedi_property_reader.convertor.accessor;
import aermicioi.aedi_property_reader.arg.accessor;
import aermicioi.aedi_property_reader.convertor.setter;
import aermicioi.aedi_property_reader.convertor.inspector;
import aermicioi.aedi_property_reader.arg.inspector;

/**
Convert a list of command line arguments to a value.

Params:
    from = list of command line arguments used to convert
    to = target type and storage of converted arguments.
Throws:
    GetOptException
**/
void convert(To, From : const(string)[])(in From from, ref To to, RCIAllocator allocator = theAllocator)
    if (isScalarType!To) {
    string[] args = cast(string[]) from;

    if (from.length == 2) {
        string identity = args.back.splitter("=").front.strip('-');

        getopt(args, identity, &to);
    }
}

/**
ditto
**/
void convert(To, From : const(string)[])(in From from, ref To to, RCIAllocator allocator = theAllocator)
    if (isSomeString!To) {
    import std.conv : conv = to;
    string[] args = cast(string[]) from;

    if (from.length == 2) {

        string identity = args.back.splitter("=").front.strip('-');

        string temp;
        getopt(args, identity, &temp);

        to = temp.conv!To;
    }
}

/**
ditto
**/
void convert(To, From : const(string)[])(in From from, ref To to, RCIAllocator allocator = theAllocator)
    if (!isSomeString!To && isArray!To) {
    string[] args = cast(string[]) from;

    string identity = args.drop(1).fold!commonPrefix.splitter("=").front.strip('-');

    getopt(args, identity, &to);
}

/**
ditto
**/
void convert(To, From : const(string)[])(in From from, ref To to, RCIAllocator allocator = theAllocator)
    if (isAssociativeArray!To) {
    string[] args = cast(string[]) from;

    string identity = args.drop(1).fold!commonPrefix.splitter("=").front.strip('-');

    getopt(args, identity, &to);
}

/**
Destroy data that is allocated using command line convertor

Params:
    to = constructed type with convert that needs to be destroyed.
**/
void destruct(To)(ref To to, RCIAllocator allocator = theAllocator) {
    destroy(to);
    to = To.init;
}

public {
    enum ArgumentAccessorFactory(From : const(string)[]) =
        () => new RuntimeFieldAccessor!(const(string)[])(new ArgumentAccessor);

    enum ArgumentInspectorFactory(From : const(string)[]) =
        () => new ArgumentInspector;
}

/**
Default convertor factory for command line arguments usable by configuration api.
**/
alias ArgumentAdvisedConvertorFactory = (Convertor[] convertors) {
    return factoryAnyConvertorBuilder(
        new TypeGuessCallbackConvertorBuilder!(convert, destruct),
        new MappingConvertorBuilder!(
            ArgumentAccessorFactory,
            CompositeSetterFactory,
            CompositeInspectorFactory,
            ArgumentInspectorFactory
        )(convertors, true, true, true, true)
    );
};