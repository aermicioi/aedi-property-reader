/**
License:
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

Authors:
    Alexandru Ermicioi
**/
module aermicioi.aedi_property_reader.convertor.placeholder;

import aermicioi.aedi : Wrapper;
import aermicioi.aedi_property_reader.convertor.traits : n;
import std.experimental.allocator;
import std.conv;

/**
Interface for objects that are aware of a type and can provide it.
**/
interface TypeAware {

    /**
    Get the type that is stored in component.

    Returns:
        TypeInfo stored in component.
    **/
    TypeInfo type() const nothrow @property @nogc pure;
}

/**
Interface for objects that can hold a value in.
**/
interface Placeholder(T) : TypeAware {

    @property {

        /**
        Get stored value.

        Returns:
            T value stored in component
        **/
        ref inout(T) value() nothrow @safe inout @nogc;

        /**
        Store value in component.

        Params:
            value = value that will be stored in.

        Returns:
            Reference to stored value.
        **/
        ref T value(ref T value) nothrow @safe;

        /**
        ditto
        **/
        final ref T value(T value) nothrow @safe {
            return this.value(value);
        }

        /**
        Subtyping to stored value.
        **/
        alias value this;
    }
}

/**
Implementation of Placeholder!T.
**/
class PlaceholderImpl(T) : Placeholder!T, Wrapper!T {

    private {
        T payload;
    }

    /**
    Constructor for placeholder accepting stored value.

    Params:
        value = value that will be stored in.
    **/
    this(ref T value) {
        this.payload = value;
    }

    /**
    ditto
    **/
    this(ref const T value) const {
        this.payload = value;
    }

    /**
    ditto
    **/
    this(T value) {
        this(value);
    }

    /**
    ditto
    **/
    this(const T value) const {
        this(value);
    }

    /**
    Get the type of component that is stored in.

    Returns:
        TypeInfo of stored component.
    **/
    TypeInfo type() const nothrow @property @nogc pure {
        return typeid(T);
    }

    @property {
        /**
        Store value in component.

        Params:
            value = value that will be stored in.

        Returns:
            Reference to stored value.
        **/
        ref T value(ref T value) nothrow @safe {
            static if (!is(typeof(this.payload) == const)) {

                this.payload = value;
            }

            return this.payload;
        }

        /**
        Get value

        Returns:
            ref inout(T)
        **/
        ref inout(T) value() @safe nothrow inout @nogc {
            return this.payload;
        }
    }
}

/**
Wrap up a value in a placeholding object.

Params:
    value = value that will be wrapped in placeholding object
    allocator = allocator used to allocate placeholding object

Returns:
    Placeholder!T with value as content.
**/
auto placeholder(T)(auto ref T value, RCIAllocator allocator = theAllocator) @trusted {
    static if (is(T : Object)) {
        return value;
    } else {
        return allocator.make!(PlaceholderImpl!T)(value);
    }
}

/**
Downcast object to type T, or unwrap it from Placeholder!T.

Downcast object to type T, or unwrap it from Placeholder!T.
If T is rooted in Object, downcast will be performed, otherwise
it is assumed that T is stored in Placeholder!T object, and therefore
object is downcast to Placeholder!T and then returned.

Params:
    object = object from which to unwrap value of type T
Returns:
    T if it is rooted in Object, or Placeholder!T if it is not.
**/
auto unwrap(T)(inout(Object) object) @trusted nothrow pure {
    import aermicioi.aedi_property_reader.convertor.traits : n;
    static if (is(T : Object)) {

        return cast(T) object;
    } else {

        auto wrapper = (cast(Placeholder!T) object);

        assert(
            wrapper !is null,
            text(
                object.classinfo, " does not implement ", typeid(Placeholder!T),
                " ", typeid(T), " content cannot be extracted"
            )
        ).n;

        return wrapper;
    }
}

/**
Identify the type of object.

Identify the type of object.
The object will be downcasted to TypeAware first, in order
to test if object is holding information about some type.
If so, the type from TypeAware object will be returned,
otherwise classinfo of object itself.

Params:
    object = component to be identified
Returns:
    TypeInfo of stored type of object implements TypeAware, or classinfo of object itself.
**/
TypeInfo identify(T : Object)(in T object) @trusted nothrow @nogc pure {
    if (object is null) {
        return typeid(null);
    }

    TypeAware p = cast(TypeAware) object;

    if (p !is null) {
        return p.type;
    }

    return object.classinfo;
}

/**
Get the type of component.

Params:
    component = the component for which to return the type.

Returns:
    TypeInfo the type of component
**/
TypeInfo identify(T)(in T component) nothrow @nogc @safe
    if (!is(T : Object)) {

    return typeid(component);
}