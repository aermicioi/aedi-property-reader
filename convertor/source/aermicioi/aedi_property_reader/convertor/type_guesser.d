/**
License:
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

Authors:
    Alexandru Ermicioi
**/
module aermicioi.aedi_property_reader.convertor.type_guesser;

/**
Interface for components that are able to guess the D type of serialized component.
**/
@safe interface TypeGuesser(SerializedType) {

    public {

        /**
        Guess the D type of serialized based on information available in it.

        Params:
            serialized = the component for which guesser will attempt to guess the type.

        Returns:
            TypeInfo guessed type
        **/
        TypeInfo guess(SerializedType serialized) const;
    }
}

/**
A guesser that simply doesn't guess anything and just returns the SerializedType
**/
@safe class SimpleTypeGuesser(SerializedType) : TypeGuesser!SerializedType {

    public {

        /**
        Guess the D type of serialized based on information available in it.

        Params:
            serialized = the component for which guesser will attempt to guess the type.

        Returns:
            TypeInfo guessed type
        **/
        TypeInfo guess(SerializedType serialized) const {
            return typeid(SerializedType);
        }
    }
}

/**
Guesser based on std.conv.to family of functions.

Guesser based on std.conv.to family of functions. It will attempt to convert sequentially
to all ConvertableTypes until one succeeds, for which the typeinfo will be returned.
**/
@safe class StdConvTypeGuesser(SerializedType, ConvertableTypes...) : TypeGuesser!SerializedType {

    public {

        /**
        Guess the D type of serialized based on eager attempts to convert serialized to one of ConvertableTypes.

        Params:
            serialized = the component for which guesser will attempt to guess the type.

        Returns:
            TypeInfo guessed type for which std.conv.to didn't fail.
        **/
        TypeInfo guess(SerializedType serialized) const {
            import std.conv : to, ConvException;

            foreach (ConvertableType; ConvertableTypes) {
                try {
                    cast(void) serialized.to!ConvertableType;
                    return typeid(ConvertableType);
                } catch (ConvException ex) {

                }
            }

            bugfix: return typeid(SerializedType); // Well without this magical label flow analysis thinks that code won't reach up to this point, which is untrue.
        }
    }
}

/**
A type guesser that will attempt to downcast passed object to a Type from Types list and
use particular type guesser on it.
**/
class DelegatingObjectTypeGuesser(Types...) : TypeGuesser!Object {
    import std.meta : staticMap;
    import aermicioi.aedi_property_reader.convertor.placeholder;

    staticMap!(TypeGuesser, Types) guessers;

    public {

        /**
        Constructor for delegating object type guesser

        Params:
            guessers = a list of guessers for this type guesser.
        **/
        this(typeof(this.guessers) guessers)
        in {
            import std.conv : text;
            static foreach (guesser; guessers) {
                assert(guesser !is null, text("Expected a guesser of type ", typeid(guesser), " not null"));
            }
        }
        do {
            this.guessers = guessers;
        }

        /**
        Guess the D type of serialized based on eager attempts to convert serialized to one of ConvertableTypes.

        Params:
            serialized = the component for which guesser will attempt to guess the type.

        Returns:
            TypeInfo guessed type for which std.conv.to didn't fail.
        **/
        TypeInfo guess(Object serialized) const {
            static foreach (index, Type; Types) {
                if (serialized.identify is typeid(Type)) {

                    return guessers[index].guess(serialized.unwrap!Type);
                }
            }

            return typeid(Object);
        }
    }
}

/**
Alias for StdConvTypeGuesser with serialized type as string.
**/
alias StringStdConvTypeGuesser(ConvertableTypes...) = StdConvTypeGuesser!(string, ConvertableTypes);

/**
Alias for StringStdConvTypeGuesser with scalar types as convertable types.
**/
alias StringToScalarConvTypeGuesser = StringStdConvTypeGuesser!(
    bool,
    long,
    double,
    char,
    bool[],
    long[],
    double[],
    string[]
);