/**
License:
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

Authors:
    Alexandru Ermicioi
**/
module aermicioi.aedi_property_reader.convertor.accessor;

import aermicioi.aedi.storage.allocator_aware;
import aermicioi.aedi.configurer.annotation.annotation;
import aermicioi.aedi_property_reader.convertor.exception : NotFoundException;
import aermicioi.aedi_property_reader.convertor.exception : InvalidCastException;
import aermicioi.aedi_property_reader.convertor.exception;
import aermicioi.aedi.util.traits;
import aermicioi.aedi_property_reader.convertor.traits : isD, n;
import aermicioi.aedi_property_reader.convertor.placeholder;
import taggedalgebraic;
import std.array;
import std.conv;
import std.algorithm;
import std.range;
import std.exception : enforce;
import std.variant;
import std.traits;
import std.meta;
import std.experimental.logger;
import std.experimental.allocator;

/**
Interface for objects that are able to get child component out of parent one.

The intent of property accessor is to provide runtime means of accessing various properties
out of a component which could be a D object, or struct. The implementation is free in allocation
policies in order to satisfy the property access, though the burden of freeing allocated memory
is left on code using the accessor.
**/
interface PropertyAccessor(ComponentType, FieldType = ComponentType, KeyType = string) {


    /**
     Get a property out of component

     Params:
         component = a component which has some properties identified by property.
         property = property of component that needs to be extracted, even by allocating some memory.
         allocator = optional allocator used only for allocation of accessed components. It should not be used for other purposes whatsoever.
     Throws:
         NotFoundException in case when no requested property is available.
         InvalidArgumentException in case when passed arguments are somehow invalid for use.
     Returns:
         FieldType accessed property.
     **/
    FieldType access(ComponentType component, in KeyType property, RCIAllocator allocator = theAllocator) const;

    /**
     Check if requested property is present in component.

     Check if requested property is present in component.
     The method could have allocation side effects due to the fact that
     it is not restricted in calling access method of the accessor.

     Params:
         component = component which is supposed to have property
         property = speculated property that is to be tested if it is present in component
         allocator = optional allocator used only for allocation of accessed/tested components. It should not be used for other purposes whatsoever.
     Returns:
         true if property is in component
     **/
    bool has(ComponentType component, in KeyType property, RCIAllocator allocator = theAllocator) const nothrow;

    /**
     Identify the type of supported component.

     Identify the type of supported component. It returns type info of component
     if it is supported by accessor, otherwise it will return typeid(void) denoting that
     the type isn't supported by accessor. The accessor is not limited to returning the type
     info of passed component, it can actually return type info of super type or any type
     given the returned type is implicitly convertible or castable to ComponentType.

     Params:
         component = the component for which accessor should identify the underlying type

     Returns:
         TypeInfo type information about passed component, or typeid(void) if component is not supported.
     **/
    TypeInfo componentType(ComponentType component) const nothrow;
}

/**
An accessor that queries stored accessors for component.
**/
class AggregatePropertyAccessor(ComponentType, FieldType = ComponentType, KeyType = string) :
    PropertyAccessor!(ComponentType, FieldType, KeyType) {

    private {

        PropertyAccessor!(ComponentType, FieldType)[] accessors_;
    }

    public {

        /**
        Constructor for aggregate property accessor.

        Params:
            accessors = list of accessors used to extract fields from component.
        **/
        this(PropertyAccessor!(ComponentType, FieldType)[] accessors...) {
            this.accessors = accessors.dup;
        }

        @property {
            /**
            Set accessors

            Params:
                accessors = accessors that implement various logic of accessing a property out of component

            Returns:
                typeof(this)
            **/
            typeof(this) accessors(
                PropertyAccessor!(ComponentType, FieldType, KeyType)[] accessors
            ) @safe nothrow pure {
                this.accessors_ = accessors;

                return this;
            }

            /**
            Get accessors

            Returns:
                PropertyAccessor!(ComponentType, FieldType, KeyType)
            **/
            inout(PropertyAccessor!(ComponentType, FieldType, KeyType)[]) accessors() @safe nothrow pure inout {
                return this.accessors_;
            }
        }

        /**
        Get a property out of component

        Params:
            component = a component which has some properties identified by property.
        Throws:
            NotFoundException in case when no requested property is available.
            InvalidArgumentException in case when passed arguments are somehow invalid for use.
        Returns:
            FieldType accessed property.
        **/
        FieldType access(ComponentType component, in KeyType property, RCIAllocator allocator = theAllocator) const {

            foreach (accessor; this.accessors) {

                if (accessor.has(component, property)) {

                    return accessor.access(component, property, allocator);
                }
            }

            import aermicioi.aedi_property_reader.convertor.exception : NotFoundException;
            throw new NotFoundException("Could not find element ${property} in ${component}", property.to!string, component.to!string);
        }

        /**
        Check if requested property is present in component.

        Check if requested property is present in component.
        The method could have allocation side effects due to the fact that
        it is not restricted in calling access method of the accessor.

        Params:
            component = component which is supposed to have property
            property = speculated property that is to be tested if it is present in component
        Returns:
            true if property is in component
        **/
        bool has(ComponentType component, in KeyType property, RCIAllocator allocator = theAllocator) const nothrow {

            foreach (accessor; this.accessors) {

                if (accessor.has(component, property, allocator)) {
                    return true;
                }
            }

            return false;
        }

        /**
        Identify the type of supported component.

        Identify the type of supported component. It returns type info of component
        if it is supported by accessor, otherwise it will return typeid(void) denoting that
        the type isn't supported by accessor. The accessor is not limited to returning the type
        info of passed component, it can actually return type info of super type or any type
        given the returned type is implicitly convertible or castable to ComponentType.

        Params:
            component = the component for which accessor should identify the underlying type

        Returns:
            TypeInfo type information about passed component, or typeid(void) if component is not supported.
        **/
        TypeInfo componentType(ComponentType component) const nothrow {
            return typeid(ComponentType);
        }
    }
}

/**
An accessor that splits property into chunks using a separator, and recursively queries an accessor for next property from
returned child property.

An accessor that splits property into chunks using a separator,and recursively queries an accessor for next property from
returned child property.
ImplSpec:
    Since a single accessor is used to fetch subsequent properties, a constraint on property accessors are placed, such as
    field of a component should be implicitly convertible to component type in order for it to be used to get next child
    in property chain.
**/
class PropertyPathAccessor(ComponentType, FieldType = ComponentType, KeyType = string) :
    PropertyAccessor!(ComponentType, FieldType, KeyType)
    if (isImplicitlyConvertible!(FieldType, ComponentType) && isInputRange!KeyType) {

    private {
        alias QualifierOfComponent = QualifierOf!ComponentType;

        PropertyAccessor!(ComponentType, FieldType) accessor_;

        ElementType!KeyType separator_;
    }

    public {

        /**
        Constructor for property path accessor

        Params:
            separator = separator used to separate field identities in a field chain.
            accessor = accessor used to access consecutively new child field.
        **/
        this(
            ElementType!KeyType separator,
            PropertyAccessor!(ComponentType, FieldType) accessor
        ) {
            this.separator = separator;
            this.accessor = accessor;
        }

        @property {
            /**
            Set accessor

            Params:
                accessor = accessor instance responsible for getting a property out of component

            Returns:
                typeof(this)
            **/
            typeof(this) accessor(PropertyAccessor!(ComponentType, FieldType, KeyType) accessor) @safe nothrow pure {
                this.accessor_ = accessor;

                return this;
            }

            /**
            Get accessor

            Returns:
                PropertyAccessor!(ComponentType, FieldType, KeyType)
            **/
            inout(PropertyAccessor!(ComponentType, FieldType, KeyType)) accessor() @safe nothrow pure inout {
                return this.accessor_;
            }

            /**
            Set propertyAccessor

            Params:
                propertyAccessor = property splitter used to cut up the property path into multiple points

            Returns:
                typeof(this)
            **/
            typeof(this) separator(ElementType!KeyType separator) @safe nothrow pure {
                this.separator_ = separator;

                return this;
            }

            /**
            Get propertyAccessor

            Returns:
                ElementType!KeyType
            **/
            inout(ElementType!KeyType) separator() @safe nothrow pure inout {
                return this.separator_;
            }
        }

        /**
        Get a property out of component

        Params:
            component = a component which has some properties identified by property.
        Throws:
            NotFoundException in case when no requested property is available.
            InvalidArgumentException in case when passed arguments are somehow invalid for use.
        Returns:
            FieldType accessed property.
        **/
        QualifierOfComponent!FieldType access(ComponentType component, in KeyType path, RCIAllocator allocator = theAllocator) const {
            import std.experimental.allocator : theAllocator, make;

            auto identities = path.splitter(this.separator);

            auto current = component.pack;
            scope(exit) current.unpack;

            foreach (identity; identities) {

                if (this.accessor.has(current.value, identity)) {

                    auto field = this.accessor.access(current.value, identity, allocator).pack;
                    current.unpack;
                    current = field;
                } else {

                    throw new NotFoundException(text(
                        "Could not find \"", identity, "\" in ${component} for property path of ${property}",
                    ), path.to!string, component.to!string);
                }
            }

            return current.value;
        }

        /**
        Check if requested property is present in component.

        Check if requested property is present in component.
        The method could have allocation side effects due to the fact that
        it is not restricted in calling access method of the accessor.

        Params:
            component = component which is supposed to have property
            property = speculated property that is to be tested if it is present in component
        Returns:
            true if property is in component
        **/
        bool has(ComponentType component, in KeyType path, RCIAllocator allocator = theAllocator) const nothrow {
            import std.experimental.allocator : theAllocator, make;

            try {

                auto identities = path.splitter(this.separator);

                auto current = component.pack;
                scope(exit) current.unpack;

                foreach (identity; identities) {
                    if (!this.accessor.has(current.value, identity, allocator)) {
                        return false;
                    }

                    if (this.accessor.has(current.value, identity, allocator)) {
                        auto field = this.accessor.access(current.value, identity, allocator).pack;
                        current.unpack;
                        current = field;
                    }
                }

                return true;
            } catch (Exception e) {
                debug(trace) error("Failed to access a property path ", path, " due to ", e).n;
            }

            return false;
        }

        /**
        Identify the type of supported component.

        Identify the type of supported component. It returns type info of component
        if it is supported by accessor, otherwise it will return typeid(void) denoting that
        the type isn't supported by accessor. The accessor is not limited to returning the type
        info of passed component, it can actually return type info of super type or any type
        given the returned type is implicitly convertible or castable to ComponentType.

        Params:
            component = the component for which accessor should identify the underlying type

        Returns:
            TypeInfo type information about passed component, or typeid(void) if component is not supported.
        **/
        TypeInfo componentType(ComponentType component) const nothrow {
            return this.accessor.componentType(component);
        }
    }
}

/**
ditto
**/
auto propertyPathAccessor(T : PropertyAccessor!(ComponentType, FieldType, KeyType), ComponentType, FieldType, KeyType)
    (ElementType!KeyType separator, T accessor) {
    return new PropertyPathAccessor!(ComponentType, FieldType, KeyType)(separator, accessor);
}

/**
An accessor that allows accessing of a property and it's childs with array syntax.

An accessor that allows accessing of a property and it's childs with array syntax.
ImplSpec:
    Two accessors are used for getting an indexed property's child. The first one is used
    for accessing an indexed property of a component, and the second one is used for subsequent
    access of child components recursively.
**/
class ArrayIndexedPropertyAccessor(ComponentType, FieldType = ComponentType, KeyType = string) :
    PropertyAccessor!(ComponentType, FieldType, KeyType)
    if (isBidirectionalRange!KeyType && isImplicitlyConvertible!(FieldType, ComponentType)) {

    private {
        alias EType = ElementType!KeyType;
        EType beggining_;
        EType ending_;

        PropertyAccessor!(ComponentType, FieldType, KeyType) accessor_;
        PropertyAccessor!(ComponentType, FieldType, KeyType) indexer_;
    }

    public {

        /**
        Constructor for array indexed accessor

        Params:
            beggining = beggining token denoting the start of an array indexing
            ending = ending token denoting the end of an array indexing
            accessor = accessor used to access property part of indexing sequence
            indexer = accessor used to access indexed part of indexing sequence
        **/
        this(
            EType beggining,
            EType ending,
            PropertyAccessor!(ComponentType, FieldType, KeyType) accessor,
            PropertyAccessor!(ComponentType, FieldType, KeyType) indexer
        ) {
            this.beggining = beggining;
            this.ending = ending;
            this.accessor = accessor;
            this.indexer = indexer;
        }

        /**
        Set beggining

        Params:
            beggining = element denoting beggining of array syntax in identity, ex. [

        Returns:
            typeof(this)
        **/
        typeof(this) beggining(EType beggining) @safe nothrow pure {
            this.beggining_ = beggining;

            return this;
        }

        /**
        Get beggining

        Returns:
            EType
        **/
        inout(EType) beggining() @safe nothrow pure inout {
            return this.beggining_;
        }

        /**
        Set ending

        Params:
            ending = element denoting the end of array indexing, ex. ]

        Returns:
            typeof(this)
        **/
        typeof(this) ending(EType ending) @safe nothrow pure {
            this.ending_ = ending;

            return this;
        }

        /**
        Get ending

        Returns:
            EType
        **/
        inout(EType) ending() @safe nothrow pure inout {
            return this.ending_;
        }

        /**
        Set accessor

        Params:
            accessor = accessor used to access property part from indexed property

        Returns:
            typeof(this)
        **/
        typeof(this) accessor(PropertyAccessor!(ComponentType, FieldType, KeyType) accessor) @safe nothrow pure {
            this.accessor_ = accessor;

            return this;
        }

        /**
        Get accessor

        Returns:
            PropertyAccessor!(ComponentType, FieldType, KeyType)
        **/
        inout(PropertyAccessor!(ComponentType, FieldType, KeyType)) accessor() @safe nothrow pure inout {
            return this.accessor_;
        }

        /**
        Set indexer

        Params:
            indexer = property accessor used to access element based on contents in index part of property

        Returns:
            typeof(this)
        **/
        typeof(this) indexer(PropertyAccessor!(ComponentType, FieldType, KeyType) indexer) @safe nothrow pure {
            this.indexer_ = indexer;

            return this;
        }

        /**
        Get indexer

        Returns:
            PropertyAccessor!(ComponentType, FieldType, KeyType)
        **/
        inout(PropertyAccessor!(ComponentType, FieldType, KeyType)) indexer() @safe nothrow pure inout {
            return this.indexer_;
        }

        /**
        Get a property out of component

        Params:
            component = a component which has some properties identified by property.
        Throws:
            NotFoundException in case when no requested property is available.
            InvalidArgumentException in case when passed arguments are somehow invalid for use.
        Returns:
            FieldType accessed property.
        **/
        FieldType access(ComponentType component, in KeyType path, RCIAllocator allocator = theAllocator) const {
            import std.experimental.allocator : make, theAllocator, dispose;
            enforce(this.has(component, path), new NotFoundException(text("Property ${property} not found in ${component}"), path.to!string, component.to!string));

            auto splitted = path.splitter(this.beggining);
            enforce!InvalidArgumentException(
                !splitted.empty && !splitted.front.empty,
                text("Malformed indexed property ", path, ", no property part found")
            );

            auto property = this.accessor.access(component, splitted.front, allocator).pack;
            scope(exit) property.unpack;

            splitted.popFront;
            enforce!InvalidArgumentException(
                !splitted.empty,
                text("Malformed indexed property ", path, ", no index part found")
            );

            foreach (identity; splitted) {
                enforce!InvalidArgumentException(
                    identity.endsWith(this.ending),
                    text("Malformed indexed property ", path, ", no closing ] found")
                );

                auto field = this.indexer.access(property.value, identity.dropBack(1)).pack;
                property.unpack;
                property = field;
            }

            return property.value;
        }

        /**
        Check if requested property is present in component.

        Check if requested property is present in component.
        The method could have allocation side effects due to the fact that
        it is not restricted in calling access method of the accessor.

        Params:
            component = component which is supposed to have property
            property = speculated property that is to be tested if it is present in component
        Returns:
            true if property is in component
        **/
        bool has(ComponentType component, in KeyType path, RCIAllocator allocator = theAllocator) const nothrow {
            import std.experimental.allocator : make, theAllocator, dispose;

            try {

                auto splitted = path.splitter(this.beggining);

                if (splitted.empty) {
                    return false;
                }

                if (splitted.front.empty) {
                    return false;
                }

                if (!this.accessor.has(component, splitted.front, allocator)) {
                    return false;
                }

                auto property = this.accessor.access(component, splitted.front, allocator).pack;
                scope(exit) property.unpack;

                splitted.popFront;
                if (splitted.empty) {
                    return false;
                }

                foreach (identity; splitted) {
                    if (!identity.endsWith(this.ending)) {
                        return false;
                    }

                    if (!this.indexer.has(property.value, identity.dropBack(1), allocator)) {
                        return false;
                    }

                    auto field = this.indexer.access(property.value, identity.dropBack(1)).pack;
                    property.unpack;
                    property = field;
                }

                return true;
            } catch (Exception e) {
                debug(trace) error("Failed to check existance of indexed path ", path, " due to ", e).n;
            }

            return false;
        }

        /**
        Identify the type of supported component.

        Identify the type of supported component. It returns type info of component
        if it is supported by accessor, otherwise it will return typeid(void) denoting that
        the type isn't supported by accessor. The accessor is not limited to returning the type
        info of passed component, it can actually return type info of super type or any type
        given the returned type is implicitly convertible or castable to ComponentType.

        Params:
            component = the component for which accessor should identify the underlying type

        Returns:
            TypeInfo type information about passed component, or typeid(void) if component is not supported.
        **/
        TypeInfo componentType(ComponentType component) const nothrow {
            return typeid(ComponentType);
        }
    }
}

/**
ditto
**/
auto arrayIndexedPropertyAccessor
    (T : PropertyAccessor!(ComponentType, FieldType, KeyType), ComponentType, FieldType, KeyType)
    (ElementType!KeyType beggining, ElementType!KeyType ending, T accessor, T indexer)
{
    return new ArrayIndexedPropertyAccessor!(ComponentType, FieldType, KeyType)(beggining, ending, accessor, indexer);
}

/**
Class that allows accessing properties that are wrapped in ticks.
**/
class TickedPropertyAccessor(ComponentType, FieldType = ComponentType, KeyType = string) :
    PropertyAccessor!(ComponentType, FieldType, KeyType)
    if (isBidirectionalRange!KeyType) {

    private {
        alias EType = ElementType!KeyType;
        EType tick_;

        PropertyAccessor!(ComponentType, FieldType, KeyType) accessor_;
    }

    public {

        /**
        Constructor for ticked accessor

        Params:
            tick = token used to tick the property
            accessor = accessor used to access property wrapped in ticks
        **/
        this(EType tick, PropertyAccessor!(ComponentType, FieldType, KeyType) accessor) {
            this.tick = tick;
            this.accessor = accessor;
        }

        /**
        Set tick

        Params:
            tick = ticking element used to encapsulate property

        Returns:
            typeof(this)
        **/
        typeof(this) tick(EType tick) @safe nothrow pure {
            this.tick_ = tick;

            return this;
        }

        /**
        Get tick

        Returns:
            EType
        **/
        inout(EType) tick() @safe nothrow pure inout {
            return this.tick_;
        }

        /**
        Set accessor

        Params:
            accessor = accessor used to access property enclosed in ticks

        Returns:
            typeof(this)
        **/
        typeof(this) accessor(PropertyAccessor!(ComponentType, FieldType, KeyType) accessor) @safe nothrow pure {
            this.accessor_ = accessor;

            return this;
        }

        /**
        Get accessor

        Returns:
            PropertyAccessor!(ComponentType, FieldType, KeyType)
        **/
        inout(PropertyAccessor!(ComponentType, FieldType, KeyType)) accessor() @safe nothrow pure inout {
            return this.accessor_;
        }

    /**
     Get a property out of component

     Params:
         component = a component which has some properties identified by property.
     Throws:
         NotFoundException in case when no requested property is available.
         InvalidArgumentException in case when passed arguments are somehow invalid for use.
     Returns:
         FieldType accessed property.
     **/
        FieldType access(ComponentType component, in KeyType path, RCIAllocator allocator = theAllocator) const {
            enforce!InvalidArgumentException(this.valid(path), text("Not found or malformed ticked property ", path));

            return this.accessor.access(component, path.drop(1).dropBack(1), allocator);
        }

    /**
     Check if requested property is present in component.

     Check if requested property is present in component.
     The method could have allocation side effects due to the fact that
     it is not restricted in calling access method of the accessor.

     Params:
         component = component which is supposed to have property
         property = speculated property that is to be tested if it is present in component
     Returns:
         true if property is in component
     **/
        bool has(ComponentType component, in KeyType path, RCIAllocator allocator = theAllocator) const {

            try {

                return this.valid(path) && this.accessor.has(component, path.strip(this.tick), allocator);
            } catch (Exception e) {

                debug(trace) error("Failed to check if ticked property exists due to: ", e).n;
            }

            return false;
        }

        /**
        Identify the type of supported component.

        Identify the type of supported component. It returns type info of component
        if it is supported by accessor, otherwise it will return typeid(void) denoting that
        the type isn't supported by accessor. The accessor is not limited to returning the type
        info of passed component, it can actually return type info of super type or any type
        given the returned type is implicitly convertible or castable to ComponentType.

        Params:
            component = the component for which accessor should identify the underlying type

        Returns:
            TypeInfo type information about passed component, or typeid(void) if component is not supported.
        **/
        TypeInfo componentType(ComponentType component) const nothrow {
            return this.accessor.componentType(component);
        }

        private bool valid(in KeyType path) const nothrow {
            try {

                return (path.front == this.tick) && (path.back == this.tick);
            } catch (Exception e) {

                debug(trace) error("Failed to check if path is ticked due to: ", e).n;
            }

            return false;
        }
    }
}

/**
ditto
**/
auto tickedAccessor
    (T : PropertyAccessor!(ComponentType, FieldType, KeyType), ComponentType, FieldType, KeyType)
    (ElementType!KeyType tick, T accessor)
{
    return new TickedPropertyAccessor!(ComponentType, FieldType, KeyType)(tick, accessor);
}

/**
Property accessor that is decaying tagged algebraic to a type accepted by decorated accessor.

ImplSpec:
    Any tagged algebraic will be decayed to type X which is accepted by decorated property or fail to do so.
    Any field returned from accessor are wrapped in same tagged algebraic, therefore there is a constraint that
    tagged algebraic should be able to hold both the component and it's field.
**/
class TaggedElementPropertyAccessorWrapper(
    Tagged : TaggedAlgebraic!Y,
    PropertyAccessorType : PropertyAccessor!(X, Z, KeyType),
    X,
    Z,
    KeyType = string,
    Y
) : PropertyAccessor!(Tagged, Tagged, KeyType) {

    private {
        PropertyAccessorType accessor_;
    }

    public {

        /**
        Constructor for tagged element property accessor.

        Params:
            accessor = underlying accessor used to access fields out of a particular component type in a tagged algebraic type.
        **/
        this(PropertyAccessorType accessor) {
            this.accessor = accessor;
        }

        @property {
            /**
            Set accessor

            Params:
                accessor = the property accessor that is wrapped

            Returns:
                typeof(this)
            **/
            typeof(this) accessor(PropertyAccessorType accessor) @safe nothrow pure {
                this.accessor_ = accessor;

                return this;
            }

            /**
            Get accessor

            Returns:
                PropertyAccessorType
            **/
            inout(PropertyAccessorType) accessor() @safe nothrow pure inout {
                return this.accessor_;
            }
        }

        /**
        Get a property out of component

        Params:
            component = a component which has some properties identified by property.
        Throws:
            NotFoundException in case when no requested property is available.
            InvalidArgumentException in case when passed arguments are somehow invalid for use.
        Returns:
            FieldType accessed property.
        **/
        Tagged access(Tagged component, in KeyType property, RCIAllocator allocator = theAllocator) const
        {
            if (this.has(component, property)) {
                return Tagged(this.accessor.access(cast(X) component, property, allocator));
            }

            import aermicioi.aedi_property_reader.convertor.exception : NotFoundException;
            import std.conv : text;
            throw new NotFoundException("${component} does not have ${property}", property.to!string, component.to!string);
        }

        /**
        Check if requested property is present in component.

        Check if requested property is present in component.
        The method could have allocation side effects due to the fact that
        it is not restricted in calling access method of the accessor.

        Params:
            component = component which is supposed to have property
            property = speculated property that is to be tested if it is present in component
        Returns:
            true if property is in component
        **/
        bool has(Tagged component, in KeyType property, RCIAllocator allocator = theAllocator) const nothrow {
            try {

                import std.meta : staticMap;

                static foreach (e; staticMap!(identifier, EnumMembers!(Tagged.Kind))) {
                    static if (mixin("is(typeof(Y." ~ e ~ ") : X)")) {
                        if (mixin("component.Kind." ~ e ~ " == component.kind")) {

                            return this.accessor.has(cast(X) component, property, allocator);
                        }

                        return false;
                    }
                }

                assert(false, "TaggedAlgebraic does not have " ~ fullyQualifiedName!X ~ " as member");

            } catch (Exception e) {
                debug(trace) error("Failed to unwrap tagged component ", component.kind, " due to ", e).n;
            }

            return false;
        }

        /**
        Identify the type of supported component.

        Identify the type of supported component. It returns type info of component
        if it is supported by accessor, otherwise it will return typeid(void) denoting that
        the type isn't supported by accessor. The accessor is not limited to returning the type
        info of passed component, it can actually return type info of super type or any type
        given the returned type is implicitly convertible or castable to ComponentType.

        Params:
            component = the component for which accessor should identify the underlying type

        Returns:
            TypeInfo type information about passed component, or typeid(void) if component is not supported.
        **/
        TypeInfo componentType(Tagged component) const nothrow {
            try {

                import std.meta : staticMap;

                static foreach (e; staticMap!(identifier, EnumMembers!(Tagged.Kind))) {
                    static if (mixin("is(typeof(Y." ~ e ~ ") : X)")) {
                        if (mixin("component.Kind." ~ e ~ " == component.kind")) {

                            return this.accessor.componentType(cast(X) component);
                        }
                    }
                }

            } catch (Exception e) {
                debug(trace) error("Failed to unwrap tagged component ", component.kind, " due to ", e).n;
            }

            assert(false, "Got stored a value that is not in tagged algebraic");
        }
    }
}

/**
ditto
**/
auto taggedAccessor(Tagged, T : PropertyAccessor!(Composite, Field, Key), Composite, Field, Key)(T accessor) {
    return new TaggedElementPropertyAccessorWrapper!(Tagged, T)(accessor);
}

/**
Implements logic for accessing associative arrays.
**/
@component
class AssociativeArrayAccessor(ComponentType : Type[Key], Type, Key) : PropertyAccessor!(ComponentType, Type, Key) {
    public {

        /**
        Get a property out of component

        Params:
            component = a component which has some properties identified by property.
        Throws:
            NotFoundException in case when no requested property is available.
            InvalidArgumentException in case when passed arguments are somehow invalid for use.
        Returns:
            FieldType accessed property.
        **/
        Type access(ComponentType component, in Key property, RCIAllocator allocator = theAllocator) const {
            auto peek = property in component;
            enforce(peek, new NotFoundException("Could not find ${property} in associative array ${component}", property.to!string, component.to!string));

            return *peek;
        }

        /**
        Check if requested property is present in component.

        Check if requested property is present in component.
        The method could have allocation side effects due to the fact that
        it is not restricted in calling access method of the accessor.

        Params:
            component = component which is supposed to have property
            property = speculated property that is to be tested if it is present in component
        Returns:
            true if property is in component
        **/
        bool has(ComponentType component, in Key property, RCIAllocator allocator = theAllocator) const nothrow {
            return (property in component) !is null;
        }

        /**
        Identify the type of supported component.

        Identify the type of supported component. It returns type info of component
        if it is supported by accessor, otherwise it will return typeid(void) denoting that
        the type isn't supported by accessor. The accessor is not limited to returning the type
        info of passed component, it can actually return type info of super type or any type
        given the returned type is implicitly convertible or castable to ComponentType.

        Params:
            component = the component for which accessor should identify the underlying type

        Returns:
            TypeInfo type information about passed component, or typeid(void) if component is not supported.
        **/
        TypeInfo componentType(ComponentType component) const nothrow {
            return typeid(ComponentType);
        }
    }
}

/**
Accessor implementing array access.
**/
@component
class ArrayAccessor(ComponentType : Type[], Type) : PropertyAccessor!(ComponentType, Type, size_t) {

    public {

        /**
        Get a property out of component

        Params:
            component = a component which has some properties identified by property.
        Throws:
            NotFoundException in case when no requested property is available.
            InvalidArgumentException in case when passed arguments are somehow invalid for use.
        Returns:
            FieldType accessed property.
        **/
        Type access(ComponentType component, in size_t property, RCIAllocator allocator = theAllocator) const {
            enforce(
                this.has(component, property),
                new NotFoundException("Could not find property ${property} in array ${component}", property.to!string, component.to!string)
            );

            return component[property];
        }

        /**
        Check if requested property is present in component.

        Check if requested property is present in component.
        The method could have allocation side effects due to the fact that
        it is not restricted in calling access method of the accessor.

        Params:
            component = component which is supposed to have property
            property = speculated property that is to be tested if it is present in component
        Returns:
            true if property is in component
        **/
        bool has(ComponentType component, in size_t property, RCIAllocator allocator = theAllocator) const nothrow {
            return property < component.length;
        }

        /**
        Identify the type of supported component.

        Identify the type of supported component. It returns type info of component
        if it is supported by accessor, otherwise it will return typeid(void) denoting that
        the type isn't supported by accessor. The accessor is not limited to returning the type
        info of passed component, it can actually return type info of super type or any type
        given the returned type is implicitly convertible or castable to ComponentType.

        Params:
            component = the component for which accessor should identify the underlying type

        Returns:
            TypeInfo type information about passed component, or typeid(void) if component is not supported.
        **/
        TypeInfo componentType(ComponentType component) const nothrow {
            return typeid(ComponentType);
        }
    }
}

/**
Accessor implementing logic for accessingstd.variant.

ImplSpec:
    The accessor can accept any variant of ComponentType. The restriction is that the underlying stored data should be
    of either associative array or dynamic array in order to access the contents of them. The return type is as well a
    variant that must be able to store associative's array field, or arrays elements.
**/
@component
class VariantAccessor(
    ComponentType,
    FieldType = ComponentType,
    KeyType = ComponentType
) : PropertyAccessor!(ComponentType, FieldType, KeyType)
    if (
        is(ComponentType : VariantN!(ComponentSize, ComponentTypes), size_t ComponentSize, ComponentTypes...) &&
        is(FieldType : VariantN!(FieldSize, FieldTypes), size_t FieldSize, FieldTypes...) &&
        is(KeyType : VariantN!(KeySize, KeyTypes), size_t KeySize, KeyTypes...)
    ) {

    private {
        static if (is(ComponentType : VariantN!(ComponentSize, CTypes), size_t ComponentSize, CTypes...)) {
            alias ComponentTypes = CTypes;
        }

        static if (is(FieldType : VariantN!(FieldSize, FTypes), size_t FieldSize, FTypes...)) {
            alias FieldTypes = FTypes;
        }

        static if (is(KeyType : VariantN!(KeySize, KTypes), size_t KeySize, KTypes...)) {
            alias KeyTypes = KTypes;
        }
    }

    public {
        static foreach (KType; KeyTypes) {
            /**
            Get a property out of component

            Params:
                component = a component which has some properties identified by property.
            Throws:
                NotFoundException in case when no requested property is available.
                InvalidArgumentException in case when passed arguments are somehow invalid for use.
            Returns:
                FieldType accessed property.
            **/
            FieldType access(ComponentType component, KType key, RCIAllocator allocator = theAllocator) const {
                return this.access(component, Unqual!KeyType(key));
            }

            /**
            Check if requested property is present in component.

            Check if requested property is present in component.
            The method could have allocation side effects due to the fact that
            it is not restricted in calling access method of the accessor.

            Params:
                component = component which is supposed to have property
                property = speculated property that is to be tested if it is present in component
            Returns:
                true if property is in component
            **/
            bool has(ComponentType component, KType key, RCIAllocator allocator = theAllocator) const nothrow {
                return this.has(component, Unqual!KeyType(key), allocator);
            }
        }

        /**
        Get a property out of component

        Params:
            component = a component which has some properties identified by property.
        Throws:
            NotFoundException in case when no requested property is available.
            InvalidArgumentException in case when passed arguments are somehow invalid for use.
        Returns:
            FieldType accessed property.
        **/
        FieldType access(ComponentType component, in KeyType key, RCIAllocator allocator = theAllocator) const {
            static foreach (Component; ComponentTypes) {{
                static if (
                    is(Component : X[W], X, W) &&
                    anySatisfy!(ApplyLeft!(isD, X), FieldTypes) &&
                    anySatisfy!(ApplyLeft!(isD, W), KeyTypes)
                ) {
                    if (
                        (component.type is typeid(Component)) &&
                        (key.type is typeid(W)) &&
                        this.has(component, key)
                    ) {
                        return Unqual!FieldType(component.get!Component[key.get!W]);
                    }
                }

                static if (
                    is(Component : Y[], Y) &&
                    anySatisfy!(ApplyLeft!(isD, Y), FieldTypes) &&
                    anySatisfy!(ApplyLeft!(isD, size_t), KeyTypes)
                ) {
                    if (
                        (component.type is typeid(Component)) &&
                        (key.type is typeid(size_t)) &&
                        this.has(component, key)
                    ) {
                        return Unqual!FieldType(component.get!Component[key.get!size_t]);
                    }
                }
            }}

            throw new NotFoundException("Could not find ${property} in ${component}", key.to!string, component.to!string);
        }

        /**
        Check if requested property is present in component.

        Check if requested property is present in component.
        The method could have allocation side effects due to the fact that
        it is not restricted in calling access method of the accessor.

        Params:
            component = component which is supposed to have property
            property = speculated property that is to be tested if it is present in component
        Returns:
            true if property is in component
        **/
        bool has(ComponentType component, in KeyType key, RCIAllocator allocator = theAllocator) const nothrow {
            try {
                static foreach (Component; ComponentTypes) {{
                    static if (
                        is(Component : X[W], X, W) &&
                        anySatisfy!(ApplyLeft!(isD, X), FieldTypes) &&
                        anySatisfy!(ApplyLeft!(isD, W), KeyTypes)
                    ) {
                        if (
                            (component.type is typeid(Component)) &&
                            (key.type is typeid(W)) &&
                            ((key.get!W in component.get!Component) !is null)
                        ) {
                            return true;
                        }
                    }

                    static if (
                        is(Component : Y[], Y) &&
                        anySatisfy!(ApplyLeft!(isD, Y), FieldTypes) &&
                        anySatisfy!(ApplyLeft!(isD, size_t), KeyTypes)
                    ) {
                        if (
                            (component.type is typeid(Component)) &&
                            (key.type is typeid(size_t)) &&
                            (key.get!size_t < component.get!Component.length)
                        ) {
                            return true;
                        }
                    }
                }}
            } catch (Exception e) {
                debug(trace) error("Accessing contents of a variant failed with following exception: ", e).n;
            }

            return false;
        }

        /**
        Identify the type of supported component.

        Identify the type of supported component. It returns type info of component
        if it is supported by accessor, otherwise it will return typeid(void) denoting that
        the type isn't supported by accessor. The accessor is not limited to returning the type
        info of passed component, it can actually return type info of super type or any type
        given the returned type is implicitly convertible or castable to ComponentType.

        Params:
            component = the component for which accessor should identify the underlying type

        Returns:
            TypeInfo type information about passed component, or typeid(void) if component is not supported.
        **/
        TypeInfo componentType(ComponentType component) const nothrow {
            return typeid(ComponentType);
        }
    }
}

/**
Accessor that accepts ComponentType with it's type erased up to Object or wrapped in a Placeholder!ComponentType if it is
not rooted into Object class (i.e. any value type, and extern c++ objects)

ImplSpec:
    The accessor will accept any object, after which it will attempt to downcast it's original type ComponentType if it is
    rooted in Object, otherwise the object will be downcasted to Placeholder!ComponentType. Failing to do so will result in
    an exception
**/
template RuntimeCompositeAccessor(ComponentType, FieldType = ComponentType, KeyType = string) {

    private alias WithComponentStorageClass = QualifierOf!ComponentType;

    class RuntimeCompositeAccessor :
        PropertyAccessor!(WithComponentStorageClass!Object, FieldType, KeyType) {

        import aermicioi.aedi_property_reader.convertor.placeholder : identify, unwrap;
        private {
            PropertyAccessor!(ComponentType, FieldType, KeyType) accessor_;
        }

        public {
            /**
            Constructor for runtime composite accessor.

            Params:
                accessor = underlying accessor used to access downcasted component.
            **/
            this(PropertyAccessor!(ComponentType, FieldType, KeyType) accessor) {
                this.accessor = accessor;
            }

            /**
            Set accessor

            Params:
                accessor = underlying accessor working on unwrapped element

            Returns:
                typeof(this)
            **/
            typeof(this) accessor(PropertyAccessor!(ComponentType, FieldType, KeyType) accessor) @safe nothrow pure {
                this.accessor_ = accessor;

                return this;
            }

            /**
            Get accessor

            Returns:
                PropertyAccessor!(ComponentType, FieldType, KeyType)
            **/
            inout(PropertyAccessor!(ComponentType, FieldType, KeyType)) accessor() @safe nothrow pure inout {
                return this.accessor_;
            }

            /**
            Get a property out of component

            Params:
                component = a component which has some properties identified by property.
            Throws:
                NotFoundException in case when no requested property is available.
                InvalidArgumentException in case when passed arguments are somehow invalid for use.
            Returns:
                FieldType accessed property.
            **/
            FieldType access(WithComponentStorageClass!Object component, in KeyType path, RCIAllocator allocator = theAllocator) const {
                enforce!InvalidArgumentException(
                    this.isValidComponent(component),
                    text("Invalid component passed ", component.identify, " when expected ", typeid(ComponentType))
                );

                enforce(this.has(component, path), new NotFoundException("Could not find property ${property} in ${component}", path.to!string, component.to!string));

                return this.accessor.access(component.unwrap!ComponentType, path, allocator);
            }

            /**
            Check if requested property is present in component.

            Check if requested property is present in component.
            The method could have allocation side effects due to the fact that
            it is not restricted in calling access method of the accessor.

            Params:
                component = component which is supposed to have property
                property = speculated property that is to be tested if it is present in component
            Returns:
                true if property is in component
            **/
            bool has(WithComponentStorageClass!Object component, in KeyType path, RCIAllocator allocator = theAllocator) const nothrow {

                return this.isValidComponent(component) &&
                    this.accessor.has(component.unwrap!ComponentType, path);
            }

            /**
            Identify the type of supported component.

            Identify the type of supported component. It returns type info of component
            if it is supported by accessor, otherwise it will return typeid(void) denoting that
            the type isn't supported by accessor. The accessor is not limited to returning the type
            info of passed component, it can actually return type info of super type or any type
            given the returned type is implicitly convertible or castable to ComponentType.

            Params:
                component = the component for which accessor should identify the underlying type

            Returns:
                TypeInfo type information about passed component, or typeid(void) if component is not supported.
            **/
            TypeInfo componentType(WithComponentStorageClass!Object component) const nothrow {
                if (component.identify is typeid(ComponentType)) {

                    return this.accessor.componentType(component.unwrap!ComponentType);
                }

                return typeid(void);
            }
        }

        private {
            bool isValidComponent(WithComponentStorageClass!Object component) const nothrow {
                bool result = component.identify is typeid(ComponentType);

                static if (is(ComponentType : Object) || is(ComponentType : const Object) || is(ComponentType : immutable Object)) {
                    result = result || (component.identify is typeid(Unqual!ComponentType));
                }

                return result;
            }
        }
    }
}

/**
An accessor that erases returned property's type.

ImplSpec:
    The accessor will simply upcast any property field to Object if they are rooted in Object class, otherwise
    it will allocate a Placeholder!FieldType for returned value and return it erased up to Object class. As such
    it is advised to use an allocator that will dispose automatically it's contents once they are not required.
    The accessor itself is not responsible for deallocation of placeholders that it returned. As a consequence
    no components should point to placeholders allocated by this accessor.
**/
template WrappingFieldAccessor(ComponentType, FieldType = ComponentType, KeyType = string) {

    private alias WithStorageOfFieldType = QualifierOf!FieldType;

    class WrappingFieldAccessor :
        PropertyAccessor!(ComponentType, WithStorageOfFieldType!Object, KeyType) {
        import aermicioi.aedi_property_reader.convertor.placeholder : identify, unwrap;

        private {
            PropertyAccessor!(ComponentType, FieldType, KeyType) accessor_;
        }

        public {

            /**
            Constructor for runtime field accessor.

            Params:
                accessor = accessor used to access fields out of component that are to be type erased on return.
            **/
            this(PropertyAccessor!(ComponentType, FieldType, KeyType) accessor) {
                this.accessor = accessor;
            }

            /**
            Set accessor

            Params:
                accessor = underlying accessor working on unwrapped element

            Returns:
                typeof(this)
            **/
            typeof(this) accessor(PropertyAccessor!(ComponentType, FieldType, KeyType) accessor) @safe nothrow pure {
                this.accessor_ = accessor;

                return this;
            }

            /**
            Get accessor

            Returns:
                PropertyAccessor!(ComponentType, FieldType, KeyType)
            **/
            inout(PropertyAccessor!(ComponentType, FieldType, KeyType)) accessor() @safe nothrow pure inout {
                return this.accessor_;
            }

            /**
            Get a property out of component

            Params:
                component = a component which has some properties identified by property.
            Throws:
                NotFoundException in case when no requested property is available.
                InvalidArgumentException in case when passed arguments are somehow invalid for use.
            Returns:
                FieldType accessed property.
            **/
            WithStorageOfFieldType!Object access(ComponentType component, in KeyType path, RCIAllocator allocator = theAllocator) const {
                import aermicioi.aedi_property_reader.convertor.placeholder : pack;
                enforce(this.has(component, path), new NotFoundException("Could not find property ${property}in ${component}", path.to!string, component.to!string));

                return cast(WithStorageOfFieldType!Object) this.accessor.access(component, path, allocator).pack(allocator);
            }

            /**
            Check if requested property is present in component.

            Check if requested property is present in component.
            The method could have allocation side effects due to the fact that
            it is not restricted in calling access method of the accessor.

            Params:
                component = component which is supposed to have property
                property = speculated property that is to be tested if it is present in component
            Returns:
                true if property is in component
            **/
            bool has(ComponentType component, in KeyType path, RCIAllocator allocator = theAllocator) const nothrow {

                return this.accessor.has(component, path, allocator);
            }

            /**
            Identify the type of supported component.

            Identify the type of supported component. It returns type info of component
            if it is supported by accessor, otherwise it will return typeid(void) denoting that
            the type isn't supported by accessor. The accessor is not limited to returning the type
            info of passed component, it can actually return type info of super type or any type
            given the returned type is implicitly convertible or castable to ComponentType.

            Params:
                component = the component for which accessor should identify the underlying type

            Returns:
                TypeInfo type information about passed component, or typeid(void) if component is not supported.
            **/
            TypeInfo componentType(ComponentType component) const nothrow {
                return this.accessor.componentType(component);
            }

        }
    }
}

/**
An accessor that erases component type's.

ImplSpec:
    The accessor will simply upcast any property field to Object if they are rooted in Object class, otherwise
    it will allocate a Placeholder!FieldType for returned value and return it erased up to Object class. As such
    it is advised to use an allocator that will dispose automatically it's contents once they are not required.
    The accessor itself is not responsible for deallocation of placeholders that it returned. As a consequence
    no components should point to placeholders allocated by this accessor.
**/
template WrappingComponentAccessor(ComponentType, FieldType = ComponentType, KeyType = string) {

    private alias WithStorageOfFieldType = QualifierOf!FieldType;

    class WrappingComponentAccessor : PropertyAccessor!(ComponentType, FieldType, KeyType) {
        import aermicioi.aedi_property_reader.convertor.placeholder : identify, unwrap;

        private {
            PropertyAccessor!(Object, FieldType, KeyType) accessor_;
        }

        public {

            /**
            Constructor for runtime field accessor.

            Params:
                accessor = accessor used to access fields out of component that are to be type erased on return.
            **/
            this(PropertyAccessor!(Object, FieldType, KeyType) accessor) {
                this.accessor = accessor;
            }

            /**
            Set accessor

            Params:
                accessor = underlying accessor working on unwrapped element

            Returns:
                typeof(this)
            **/
            typeof(this) accessor(PropertyAccessor!(Object, FieldType, KeyType) accessor) @safe nothrow pure
            in (accessor !is null, "Expected non null reference to an accessor.") {
                this.accessor_ = accessor;

                return this;
            }

            /**
            Get accessor

            Returns:
                PropertyAccessor!(ComponentType, FieldType, KeyType)
            **/
            inout(PropertyAccessor!(Object, FieldType, KeyType)) accessor() @safe nothrow pure inout {
                return this.accessor_;
            }

            /**
            Get a property out of component

            Params:
                component = a component which has some properties identified by property.
            Throws:
                NotFoundException in case when no requested property is available.
                InvalidArgumentException in case when passed arguments are somehow invalid for use.
            Returns:
                FieldType accessed property.
            **/
            FieldType access(ComponentType component, in KeyType path, RCIAllocator allocator = theAllocator) const {
                import aermicioi.aedi_property_reader.convertor.placeholder : pack;
                enforce(this.has(component, path), new NotFoundException("Could not find property ${property}in ${component}", path.to!string, component.to!string));

                auto temporary = component.stored;
                return this.accessor.access(temporary, path, allocator);
            }

            /**
            Check if requested property is present in component.

            Check if requested property is present in component.
            The method could have allocation side effects due to the fact that
            it is not restricted in calling access method of the accessor.

            Params:
                component = component which is supposed to have property
                property = speculated property that is to be tested if it is present in component
            Returns:
                true if property is in component
            **/
            bool has(ComponentType component, in KeyType path, RCIAllocator allocator = theAllocator) const nothrow {

                auto temporary = component.pack;
                scope(exit) temporary.unpack!ComponentType;

                return this.accessor.has(temporary, path, allocator);
            }

            /**
            Identify the type of supported component.

            Identify the type of supported component. It returns type info of component
            if it is supported by accessor, otherwise it will return typeid(void) denoting that
            the type isn't supported by accessor. The accessor is not limited to returning the type
            info of passed component, it can actually return type info of super type or any type
            given the returned type is implicitly convertible or castable to ComponentType.

            Params:
                component = the component for which accessor should identify the underlying type

            Returns:
                TypeInfo type information about passed component, or typeid(void) if component is not supported.
            **/
            TypeInfo componentType(ComponentType component) const nothrow {

                auto temporary = component.pack;
                scope(exit) temporary.unpack!ComponentType;
                return this.accessor.componentType(temporary);
            }

        }
    }
}

/**
An accessor that downcasts or unwraps passed component.

ImplSpec:
    The accessor will simply upcast any property field to Object if they are rooted in Object class, otherwise
    it will allocate a Placeholder!FieldType for returned value and return it erased up to Object class. As such
    it is advised to use an allocator that will dispose automatically it's contents once they are not required.
    The accessor itself is not responsible for deallocation of placeholders that it returned. As a consequence
    no components should point to placeholders allocated by this accessor.
**/
template UnwrappingComponentAccessor(ComponentType, FieldType = ComponentType, KeyType = string) {

    private alias WithStorageOfFieldType = QualifierOf!FieldType;

    class UnwrappingComponentAccessor :
        PropertyAccessor!(Object, FieldType, KeyType) {
        import aermicioi.aedi_property_reader.convertor.placeholder : identify, unwrap;

        private {
            PropertyAccessor!(ComponentType, FieldType, KeyType) accessor_;
        }

        public {

            /**
            Constructor for runtime component accessor.

            Params:
                accessor = accessor used to access fields out of component that are to be type erased on return.
            **/
            this(PropertyAccessor!(ComponentType, FieldType, KeyType) accessor) {
                this.accessor = accessor;
            }

            /**
            Set accessor

            Params:
                accessor = underlying accessor working on unwrapped element

            Returns:
                typeof(this)
            **/
            typeof(this) accessor(PropertyAccessor!(ComponentType, FieldType, KeyType) accessor) @safe nothrow pure
                in (accessor !is null, "Expected non null reference to an accessor.") {
                this.accessor_ = accessor;

                return this;
            }

            /**
            Get accessor

            Returns:
                PropertyAccessor!(ComponentType, FieldType, KeyType)
            **/
            inout(PropertyAccessor!(ComponentType, FieldType, KeyType)) accessor() @safe nothrow pure inout {
                return this.accessor_;
            }

            /**
            Get a property out of component

            Params:
                component = a component which has some properties identified by property.
            Throws:
                NotFoundException in case when no requested property is available.
                InvalidArgumentException in case when passed arguments are somehow invalid for use.
            Returns:
                FieldType accessed property.
            **/
            FieldType access(Object component, in KeyType path, RCIAllocator allocator = theAllocator) const {
                import aermicioi.aedi_property_reader.convertor.placeholder : pack;
                enforce(this.has(component, path), new NotFoundException("Could not find property ${property} in ${component}", path.to!string, component.to!string));

                return this.accessor.access(component.unwrap!ComponentType, path, allocator);
            }

            /**
            Check if requested property is present in component.

            Check if requested property is present in component.
            The method could have allocation side effects due to the fact that
            it is not restricted in calling access method of the accessor.

            Params:
                component = component which is supposed to have property
                property = speculated property that is to be tested if it is present in component
            Returns:
                true if property is in component
            **/
            bool has(Object component, in KeyType path, RCIAllocator allocator = theAllocator) const nothrow {

                return
                    (component.identify is typeid(ComponentType)) &&
                    this.accessor.has(component.unwrap!ComponentType, path, allocator);
            }

            /**
            Identify the type of supported component.

            Identify the type of supported component. It returns type info of component
            if it is supported by accessor, otherwise it will return typeid(void) denoting that
            the type isn't supported by accessor. The accessor is not limited to returning the type
            info of passed component, it can actually return type info of super type or any type
            given the returned type is implicitly convertible or castable to ComponentType.

            Params:
                component = the component for which accessor should identify the underlying type

            Returns:
                TypeInfo type information about passed component, or typeid(void) if component is not supported.
            **/
            TypeInfo componentType(Object component) const nothrow {
                if (component.identify is typeid(ComponentType)) {

                    return this.accessor.componentType(component.unwrap!ComponentType);
                }

                return typeid(void);
            }
        }
    }
}

/**
An accessor that downcasts or unwraps resulting field.

ImplSpec:
    The accessor will simply upcast any property field to Object if they are rooted in Object class, otherwise
    it will allocate a Placeholder!FieldType for returned value and return it erased up to Object class. As such
    it is advised to use an allocator that will dispose automatically it's contents once they are not required.
    The accessor itself is not responsible for deallocation of placeholders that it returned. As a consequence
    no components should point to placeholders allocated by this accessor.
**/
template UnwrappingFieldAccessor(ComponentType, FieldType = ComponentType, KeyType = string) {

    private alias WithStorageOfFieldType = QualifierOf!FieldType;

    class UnwrappingFieldAccessor :
        PropertyAccessor!(ComponentType, FieldType, KeyType) {
        import aermicioi.aedi_property_reader.convertor.placeholder : identify, unwrap;

        private {
            PropertyAccessor!(ComponentType, Object, KeyType) accessor_;
        }

        public {

            /**
            Constructor for runtime component accessor.

            Params:
                accessor = accessor used to access fields out of component that are to be type erased on return.
            **/
            this(PropertyAccessor!(ComponentType, Object, KeyType) accessor) {
                this.accessor = accessor;
            }

            /**
            Set accessor

            Params:
                accessor = underlying accessor working on unwrapped element

            Returns:
                typeof(this)
            **/
            typeof(this) accessor(PropertyAccessor!(ComponentType, Object, KeyType) accessor) @safe nothrow pure
                in (accessor !is null, "Expected non null reference to an accessor.") {
                this.accessor_ = accessor;

                return this;
            }

            /**
            Get accessor

            Returns:
                PropertyAccessor!(ComponentType, FieldType, KeyType)
            **/
            inout(PropertyAccessor!(ComponentType, Object, KeyType)) accessor() @safe nothrow pure inout {
                return this.accessor_;
            }

            /**
            Get a property out of component

            Params:
                component = a component which has some properties identified by property.
            Throws:
                NotFoundException in case when no requested property is available.
                InvalidArgumentException in case when passed arguments are somehow invalid for use.
            Returns:
                FieldType accessed property.
            **/
            FieldType access(ComponentType component, in KeyType path, RCIAllocator allocator = theAllocator) const {
                import aermicioi.aedi_property_reader.convertor.placeholder : pack;
                enforce(this.has(component, path), new NotFoundException("Could not find property ${property} in ${component}", path.to!string, component.to!string));

                return this.accessor.access(component, path, allocator).unpack!FieldType(allocator);
            }

            /**
            Check if requested property is present in component.

            Check if requested property is present in component.
            The method could have allocation side effects due to the fact that
            it is not restricted in calling access method of the accessor.

            Params:
                component = component which is supposed to have property
                property = speculated property that is to be tested if it is present in component
            Returns:
                true if property is in component
            **/
            bool has(ComponentType component, in KeyType path, RCIAllocator allocator = theAllocator) const nothrow {

                return this.accessor.has(component, path, allocator);
            }

            /**
            Identify the type of supported component.

            Identify the type of supported component. It returns type info of component
            if it is supported by accessor, otherwise it will return typeid(void) denoting that
            the type isn't supported by accessor. The accessor is not limited to returning the type
            info of passed component, it can actually return type info of super type or any type
            given the returned type is implicitly convertible or castable to ComponentType.

            Params:
                component = the component for which accessor should identify the underlying type

            Returns:
                TypeInfo type information about passed component, or typeid(void) if component is not supported.
            **/
            TypeInfo componentType(ComponentType component) const nothrow {
                if (component.identify is typeid(ComponentType)) {

                    return this.accessor.componentType(component);
                }

                return typeid(void);
            }
        }
    }
}

/**
Accessor that allows access to fields and properties of a component of Type.

ImplSpec:
    The returned field will be erased up to Object class if it is rooted in Object class, or will
    be placed into a Placeholder!(field type) that is allocated using an allocator. As such it is advised
    that allocator used in the accessor to be disposable after accessing of components was done. As a consequence
    no components should point to placeholders allocated by this accessor.
**/
@component
template CompositeAccessor(Type) {

    private  {
        alias WithStorageClassOfType = QualifierOf!Type;

        static if (is(Type == const)) {

            auto modifier(FunctionAttribute attr) {
                return attr & FunctionAttribute.const_;
            }

        } else static if (is(Type == immutable)) {

            auto modifier(FunctionAttribute attr) {
                return attr & FunctionAttribute.immutable_;
            }
        } else {

            auto modifier(FunctionAttribute attr) {
                return (attr & (FunctionAttribute.const_ | FunctionAttribute.immutable_)) == FunctionAttribute.none;
            }
        }
    }

    class CompositeAccessor : PropertyAccessor!(Type, WithStorageClassOfType!Object, string) {
        import std.traits;
        import std.meta;
        import aermicioi.aedi.util.traits;
        import aermicioi.aedi_property_reader.convertor.convertor;

        public {

            /**
            Get a property out of component

            Params:
                component = a component which has some properties identified by property.
            Throws:
                NotFoundException in case when no requested property is available.
                InvalidArgumentException in case when passed arguments are somehow invalid for use.
            Returns:
                FieldType accessed property.
            **/
            WithStorageClassOfType!Object access(Type component, in string property, RCIAllocator allocator = theAllocator) const {
                foreach (string member; __traits(allMembers, Type)) {

                    static if (isPublic!(component, member)) {
                        if (member == property) {
                            static if (isField!(Type, member)) {

                                return cast(WithStorageClassOfType!Object) (__traits(getMember, component, member))
                                    .packWithStorageClass!WithStorageClassOfType(allocator);
                            } else static if(isSomeFunction!(__traits(getMember, component, member))) {

                                static foreach(overload; __traits(getOverloads, Type, member)) {
                                    static if (
                                        isPropertyGetter!overload &&
                                        (
                                            (modifier(functionAttributes!overload)) ||
                                            (functionAttributes!overload & FunctionAttribute.inout_)
                                        )
                                    ) {
                                        return cast(WithStorageClassOfType!Object) (__traits(getMember, component, member))
                                            .packWithStorageClass!WithStorageClassOfType(allocator);
                                    }
                                }
                            }
                        }
                    }
                }

                throw new NotFoundException("${component} does not have ${property} property", property.to!string,  component.to!string);
            }

            /**
            Check if requested property is present in component.

            Check if requested property is present in component.
            The method could have allocation side effects due to the fact that
            it is not restricted in calling access method of the accessor.

            Params:
                component = component which is supposed to have property
                property = speculated property that is to be tested if it is present in component
            Returns:
                true if property is in component
            **/
            bool has(Type component, in string property, RCIAllocator allocator = theAllocator) const nothrow {

                foreach (string member; __traits(allMembers, Type)) {

                    static if (isPublic!(component, member)) {
                        if (member == property) {
                            static if (isField!(Type, member)) {
                                return true;
                            } else static if(isSomeFunction!(__traits(getMember, component, member))) {
                                static foreach(overload; __traits(getOverloads, Type, member)) {

                                    static if (
                                        isPropertyGetter!overload &&
                                        (
                                            (modifier(functionAttributes!overload)) ||
                                            (functionAttributes!overload & FunctionAttribute.inout_)
                                        )
                                    ) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }
                }

                return false;
            }

            /**
            Identify the type of supported component.

            Identify the type of supported component. It returns type info of component
            if it is supported by accessor, otherwise it will return typeid(void) denoting that
            the type isn't supported by accessor. The accessor is not limited to returning the type
            info of passed component, it can actually return type info of super type or any type
            given the returned type is implicitly convertible or castable to ComponentType.

            Params:
                component = the component for which accessor should identify the underlying type

            Returns:
                TypeInfo type information about passed component, or typeid(void) if component is not supported.
            **/
            TypeInfo componentType(WithStorageClassOfType!Type component) const nothrow {
                return typeid(Type);
            }

        }
    }
}

/**
Accessor that converts input property identity of InputKeyType converts to ConvertedKeyType, and then uses it to access the ComponentType using decorated convertor.

Notice: const InputKeyType must decay to mutable InputKeyType in order for conversion to work properly, as most convertors do not support const values.
**/
class KeyConvertingAccessor
    (ComponentType, FieldType = ComponentType, InputKeyType = string, ConvertedKeyType = InputKeyType) :
    PropertyAccessor!(ComponentType, FieldType, InputKeyType) {

    import aermicioi.aedi_property_reader.convertor.convertor;

    private {
        Convertor convertor_;
        PropertyAccessor!(ComponentType, FieldType, ConvertedKeyType) accessor_;
    }

    public {

        /**
        Constructor for KeyConvertingAccessor

        Params:
            accessor = accessor that understands ConvertedKeyType only
            convertor = convertor used to convert property path of InputKeyType to ConvertedKeyType
        **/
        this(PropertyAccessor!(ComponentType, FieldType, ConvertedKeyType) accessor, Convertor convertor) {
            this.accessor = accessor;
            this.convertor = convertor;
        }

        /**
        Set convertor

        Params:
            convertor = convertor used to convert input keytype to underlying keytype understood by decorated accessor

        Returns:
            typeof(this)
        **/
        typeof(this) convertor(Convertor convertor) @safe pure {
            enforce(
                convertor.convertsTo(typeid(ConvertedKeyType)) &&
                convertor.convertsFrom(typeid(InputKeyType)),
                new InvalidArgumentException(text(
                    "Invalid convertor provided for converting accessor key. Convertor capable converting from ",
                    typeid(InputKeyType), " to ",
                    typeid(ConvertedKeyType), " is required. Got convertor ", convertor, " capable to convert from ",
                    convertor.from, " to ",
                    convertor.to
                ))
            );
            this.convertor_ = convertor;

            return this;
        }

        /**
        Get convertor

        Returns:
            Convertor
        **/
        inout(Convertor) convertor() @safe nothrow pure inout {
            return this.convertor_;
        }

        /**
        Set accessor

        Params:
            accessor = underlying accessor doing all heavy lifting

        Returns:
            typeof(this)
        **/
        typeof(this) accessor(
            PropertyAccessor!(ComponentType, FieldType, ConvertedKeyType) accessor
        ) @safe nothrow pure {
            this.accessor_ = accessor;

            return this;
        }

        /**
        Get accessor

        Returns:
            PropertyAccessor!(ComponentType, FieldType, ConvertedKeyType)
        **/
        inout(PropertyAccessor!(ComponentType, FieldType, ConvertedKeyType)) accessor() @safe nothrow pure inout {
            return this.accessor_;
        }

        /**
        Get a property out of component

        Params:
            component = a component which has some properties identified by property.
        Throws:
            NotFoundException in case when no requested property is available.
            InvalidArgumentException in case when passed arguments are somehow invalid for use.
        Returns:
            FieldType accessed property.
        **/
        FieldType access(ComponentType component, in InputKeyType property, RCIAllocator allocator = theAllocator) const {
            InputKeyType modifiable = property;

            auto wrapped = modifiable.stored;
            Object key = convertor.convert(wrapped, typeid(ConvertedKeyType));
            scope(exit) convertor.destruct(typeid(InputKeyType), key, allocator);


            return this.accessor.access(component, key.unwrap!ConvertedKeyType, allocator);
        }

        /**
        Check if requested property is present in component.

        Check if requested property is present in component.
        The method could have allocation side effects due to the fact that
        it is not restricted in calling access method of the accessor.

        Params:
            component = component which is supposed to have property
            property = speculated property that is to be tested if it is present in component
        Returns:
            true if property is in component
        **/
        bool has(ComponentType component, in InputKeyType property, RCIAllocator allocator = theAllocator) const nothrow {
            try {
                Object key;
                scope(exit) if (key !is null) convertor.destruct(typeid(InputKeyType), key, allocator);

                InputKeyType modifiable = property;
                auto temporary = modifiable.stored;

                try {
                    key = convertor.convert(temporary, typeid(ConvertedKeyType), allocator); // TODO find a proper way to retain constness while extracting type info from methods

                } catch (ConvertorException e) {
                    info("Attempting to convert input key ", typeid(InputKeyType), " to type of ", typeid(ConvertedKeyType), " ended in an exception, returning false.");
                    return false;
                }

                return this.accessor.has(component, key.unwrap!ConvertedKeyType, allocator);
            } catch (Exception e) {

                throw new Error("Checking for existence of property has thrown an unexpected exception", e);
            }
        }

        /**
        Identify the type of supported component.

        Identify the type of supported component. It returns type info of component
        if it is supported by accessor, otherwise it will return typeid(void) denoting that
        the type isn't supported by accessor. The accessor is not limited to returning the type
        info of passed component, it can actually return type info of super type or any type
        given the returned type is implicitly convertible or castable to ComponentType.

        Params:
            component = the component for which accessor should identify the underlying type

        Returns:
            TypeInfo type information about passed component, or typeid(void) if component is not supported.
        **/
        TypeInfo componentType(ComponentType component) const nothrow {
            return this.accessor.componentType(component);
        }
    }
}

/**
Creates a dlang dsl language for accessing properties out of a ComponentType.

Params:
    accessor = accessor used to access property like values
    indexer = accessor used to access indexed like values

Returns:
    PropertyPathAccessor!(ComponentType, FieldType, KeyType) with dsl like configuration.
**/
auto dsl
    (ComponentType, FieldType, KeyType)
    (
        PropertyAccessor!(ComponentType, FieldType, KeyType) accessor,
        PropertyAccessor!(ComponentType, FieldType, KeyType) indexer
    )
{
    return new PropertyPathAccessor!(ComponentType, FieldType, KeyType)(
        '.',
        new AggregatePropertyAccessor!(ComponentType, FieldType, KeyType)(
            accessor,
            new ArrayIndexedPropertyAccessor!(ComponentType, FieldType, KeyType)(
                '[', ']',
                accessor,
                new AggregatePropertyAccessor!(ComponentType, FieldType, KeyType)(
                    new TickedPropertyAccessor!(ComponentType, FieldType, KeyType)(
                        '\'',
                        accessor,
                    ),
                    new TickedPropertyAccessor!(ComponentType, FieldType, KeyType)(
                        '"',
                        accessor,
                    ),
                    indexer
                )
            )
        )
    );
}

/**
Creates a dlang dsl language for accessing properties out of a ComponentType.

The difference compared to a simple dsl is the fact that runtimeDsl will operate
with erased components (components with erased type), which incurs some additional
cost of creating temporaries to hide component type.

Params:
    accessor = accessor used to access property like values
    indexer = accessor used to access indexed like values

Returns:
    PropertyPathAccessor!(ComponentType, FieldType, KeyType) with dsl like configuration.
**/
auto runtimeDsl(ComponentType, FieldType, KeyType)
    (
        PropertyAccessor!(ComponentType, FieldType, KeyType) accessor,
        PropertyAccessor!(ComponentType, FieldType, KeyType) indexer
    )
{
    return new WrappingComponentAccessor!(ComponentType, FieldType, KeyType)(
        new UnwrappingFieldAccessor!(Object, FieldType, KeyType)(
            dsl(
                new UnwrappingComponentAccessor!(ComponentType, Object, KeyType)(
                    new WrappingFieldAccessor!(ComponentType, FieldType, KeyType)(
                        accessor
                    )
                ),
                new UnwrappingComponentAccessor!(ComponentType, Object, KeyType)(
                    new WrappingFieldAccessor!(ComponentType, FieldType, KeyType)(
                        indexer
                    )
                )
            )
        )
    );
}