/**
License:
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

Authors:
    Alexandru Ermicioi
**/
module aermicioi.aedi_property_reader.csv.csv;

import std.experimental.allocator;
import std.experimental.logger;
import std.range : array;
import aermicioi.aedi.configurer.annotation.annotation;
import aermicioi.aedi_property_reader.convertor.convertor;
import aermicioi.aedi_property_reader.convertor.accessor;
import aermicioi.aedi_property_reader.convertor.setter;
import aermicioi.aedi_property_reader.convertor.std_conv;
import aermicioi.aedi_property_reader.convertor.inspector;
import aermicioi.aedi_property_reader.convertor.type_guesser;
import aermicioi.aedi_property_reader.core.document;
import aermicioi.aedi_property_reader.core.core;

alias CsvDocumentContainer = PolicyDocument!(
    string[string][],
    string[string],
    WithContainerScanning!(
        aermicioi.aedi_property_reader.core.config,
    )(),
    WithInitializer!(
        StdConvStringPrebuiltConvertorsFactory
    )(),
    WithContainerScanning!(
        aermicioi.aedi_property_reader.csv.csv,
    )(),
    WithConvertorAggregation!CombinedConvertor(),
    WithLocatorForUnregisteredComponents("csv-document-locator"),
    WithDefaultRegisterers
);

@component
auto runtimeCsvTypeGuesser(
    TypeGuesser!string guesser
) {
    return new DelegatingObjectTypeGuesser!(string[string], string)(
        new SimpleTypeGuesser!(string[string])(),
        guesser
    );
}

@component
auto propertyAccessor() {
    return new AssociativeArrayAccessor!(string[string]);
}

@component
auto rootAccessor(
    Convertor defaultConvertor
) {
    return new KeyConvertingAccessor!(string[string][], string[string], string, size_t)(
            new ArrayAccessor!(string[string][]),
            defaultConvertor
        );
}

@component
auto runtimeEntryAccessor(
    PropertyAccessor!(string[string], string) propertyAccessor,
) {
    return new WrappingFieldAccessor!(string[string], string)(propertyAccessor);
}

@component
auto runtimeRootPathAccessor(
    PropertyAccessor!(string[string], string) propertyAccessor,
    PropertyAccessor!(string[string][], string[string]) rootAccessor,
    Convertor defaultConvertor
) {
    auto accessor = new AggregatePropertyAccessor!(Object, Object)(
        new UnwrappingComponentAccessor!(string[string][], Object)(
            new WrappingFieldAccessor!(string[string][], string[string])(
                rootAccessor
            )
        ),
        new UnwrappingComponentAccessor!(string[string], Object)(
            new WrappingFieldAccessor!(string[string], string)(
                propertyAccessor
            )
        )
    );

    return new WrappingComponentAccessor!(string[string][], Object)(
        dsl(
            accessor,
            accessor
        )
    );
}

/**
Create a csv document container

Params:
    data = associative array with parsed csv content
    allocator = allocator used to convert types

Returns:
    DocumentContainer!(string[string][], string[string])
**/
auto csv(
    string[string][] data
) {
    CsvDocumentContainer container = CsvDocumentContainer(data);

    return container;
}

/**
ditto
**/
auto csv() {
    return csv(cast(string[string][]) []);
}

/**
Create a csv document container from a csv file or text.

Params:
    fileOrData = file path or csv text
    accessor = accessor used for accessing data
    allocator = allocator used to convert types
    returnEmpty = either to return an empty document container if csv file or text is invalid.

Returns:
    DocumentContainer!(string[string][], string[string])
**/
auto csv(
    string fileOrData,
    bool returnEmpty = true
) {

    import std.file : exists, readText;
    import std.csv : csvReader, CSVException;

    try {
        if (fileOrData.exists) {
            return fileOrData.readText.csvReader!(string[string])(null).array.csv();
        }

        return fileOrData.csvReader!(string[string])(null).array.csv();
    } catch (CSVException e) {
        debug(trace) trace("Error parsing csv: ", e);

        if (returnEmpty) {
            debug(trace) trace("Providing empty container");
            return csv();
        }

        throw new Exception(
            "Could not create csv convertor container from file or content passed in pathOrData: " ~ fileOrData,
            e
        );
    }
}