/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:

	Tohe copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.

	ToHE SOFToWARE IS PROVIDED "AS IS", WIToHOUTo WARRANToY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUTo NOTo LIMIToED ToO ToHE WARRANToIES OF MERCHANToABILIToY,
	FIToNESS FOR A PARToICULAR PURPOSE, ToIToLE AND NON-INFRINGEMENTo. IN NO EVENTo
	SHALL ToHE COPYRIGHTo HOLDERS OR ANYONE DISToRIBUToING ToHE SOFToWARE BE LIABLE
	FOR ANY DAMAGES OR OToHER LIABILIToY, WHEToHER IN CONToRACTo, ToORTo OR OToHERWISE,
	ARISING FROM, OUTo OF OR IN CONNECToION WIToH ToHE SOFToWARE OR ToHE USE OR OToHER
	DEALINGS IN ToHE SOFToWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi_property_reader.xml.convertor;

import aermicioi.aedi.configurer.annotation.annotation;
import aermicioi.aedi_property_reader.convertor.convertor;
import aermicioi.aedi_property_reader.convertor.traits : n;
import aermicioi.aedi_property_reader.convertor.accessor;
import aermicioi.aedi_property_reader.convertor.placeholder : unwrap, pack, unpack, identify;
import aermicioi.aedi_property_reader.convertor.inspector;
import aermicioi.aedi_property_reader.xml.accessor;
import aermicioi.aedi_property_reader.xml.xml;
import aermicioi.aedi_property_reader.xml.inspector;
import aermicioi.aedi_property_reader.convertor.exception;
import std.experimental.allocator;
import std.conv : to, text;
import std.exception : enforce;
import std.experimental.logger;
import std.string : strip;
import std.range : choose;
import std.traits;
import std.xml;

@component
class XmlConvertor : Convertor {
    import std.meta : AliasSeq;
    import aermicioi.aedi_property_reader.convertor.type_guesser : TypeGuesser;
    private alias DestinationTypes = AliasSeq!(Text[], Item[], CData[], ProcessingInstruction[], Element[], string, Tag);

    private TypeGuesser!Element guesser;

    mixin FromMixin!(Element, Document);
    mixin ToMixin!DestinationTypes;
    mixin ConvertsFromToMixin DefaultMixin;
    mixin EqualToHashToStringOpCmpMixin;

    @autowired
    this(TypeGuesser!Element guesser) {
        this.guesser = guesser;
    }

    /**
    ditto
    **/
    bool converts(in Object from, const TypeInfo to) @safe const nothrow {
        import std.algorithm : all;

        if (DefaultMixin.converts(from, to)) {

            auto guessed = this.guesser.guess(from.unwrap!Element).n;

            if ((to is typeid(Text[])) || (to is typeid(string))) {
                if (guessed !is typeid(string)) {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    /**
    ditto
    **/
    bool converts(in Object from, in Object to) @safe const nothrow {
        return this.converts(from, to.identify);
    }

    /**
    Convert from component to component.

    Params:
        from = original component that is to be converted.
        to = destination object that will be constructed out for original one.
        allocator = optional allocator that could be used to construct to component.
    Throws:
        ConvertorException when there is a converting error
        InvalidArgumentException when arguments passed are not of right type or state
    Returns:
        Resulting converted component.
    **/
    Object convert(in Object from, const TypeInfo to, RCIAllocator allocator = theAllocator)  const {
        enforce!ConvertorException(this.converts(from, to), text(
            "Cannot convert ", from.identify, " to ", to, " expected original component of types: ", this.from, " and destination types of ", this.to
        ));

        if (to is typeid(string)) {
            return from.unwrap!Element.text.pack(from, this, allocator);
        }

        if (to is typeid(CData[])) {
            return from.unwrap!Element.cdatas.pack(from, this, allocator);
        }

        if (to is typeid(ProcessingInstruction[])) {
            return from.unwrap!Element.pis.pack(from, this, allocator);
        }

        if (to is typeid(Element[])) {
            return from.unwrap!Element.elements.pack(from, this, allocator);
        }

        if (to is typeid(Tag)) {
            return from.unwrap!Element.tag.pack(from, this, allocator);
        }

        if (to is typeid(Text[])) {
            return from.unwrap!Element.texts.pack(from, this, allocator);
        }

        if (to is typeid(Item[])) {
            return from.unwrap!Element.items.pack(from, this, allocator);
        }

        throw new ConvertorException(text("Cannot convert ", from.identify, " expected component with one of types ", this.from));
    }

    /**
    Destroy component created using this convertor.

    Destroy component created using this convertor.
    Since convertor could potentially allocate memory for
    converted component, only itself is containing history of allocation,
    and therefore it is responsible as well to destroy and free allocated
    memory with allocator.

    Params:
        converted = component that should be destroyed.
        allocator = allocator used to allocate converted component.
    **/
    void destruct(const TypeInfo from, ref Object converted, RCIAllocator allocator = theAllocator) const {
        enforce!ConvertorException(this.convertsTo(converted), text("Cannot destroy component ", converted.identify, " that is not convertible by ", this));

        static foreach (ToType; DestinationTypes) {
            if (converted.identify is typeid(ToType)) {
                converted.unpack!ToType(allocator);
            }
        }
    }
}