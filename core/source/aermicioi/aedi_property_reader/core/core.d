/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:

	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi_property_reader.core.core;

import aermicioi.aedi.storage.storage;
import aermicioi.aedi.storage.locator;
import aermicioi.aedi_property_reader.core.convertor;
import aermicioi.aedi_property_reader.core.document;
import std.meta;

/**
Configuration context that is providing a nice api to add convertors into a container for a document.
**/
struct ConvertorContext(DocumentContainerType : DocumentContainer!(DocumentType, FieldType), alias AdvisedConvertor, DocumentType, FieldType) {

	/**
	Configured container.
	**/
    DocumentContainerType container;

	/**
	ditto
	**/
    alias container this;

	/**
	Associate a convertor to a field in document that has property path, to be used for conversion.

	Params:
		To = the type of destination component that convertor should yield
		path = property path for a field in document.
	**/
    ref typeof(this) register(To)(string path) {
		auto convertor = AdvisedConvertor!(To, FieldType)();

		static if (is(typeof(convertor) : CombinedConvertor) && is(DocumentContainerType : Convertor)) {
			convertor.add(container);
		}

        container.set(convertor, path);

        return this;
    }

	/**
	Associate a convertor to a type to be used by document when no specific convertor is provided for document field.

	Params:
		To = the type of destination component that convertor should yield
	**/
    ref typeof(this) register(To)() {

        this.register!(To, To);
    }

	/**
	Associate a convertor to a type for an interface to be used by document when no specific convertor is provided for document field.

	Params:
		Iface = interface for which the convertor is bound to.
		To = the type of destination component that convertor should yield
	**/
    ref typeof(this) register(Iface, To : Iface)() {
        import std.traits : fullyQualifiedName;

        return this.register!To(fullyQualifiedName!Iface);
    }

    alias property = register;
}

/**
Take a document container and create a configuration context for it.

Params:
	container = container for which configuration context is created.

Returns:
	ConvertorContext(DocumentContainerType, AdvisedConvertor, DocumentType, FieldType) a configuration context
**/
auto configure(DocumentContainerType : DocumentContainer!(DocumentType, FieldType), alias AdvisedConvertor, DocumentType, FieldType)(DocumentContainerType container) {
    return ConvertorContext!(DocumentContainerType, AdvisedConvertor)(container);
}

/**
ditto
**/
auto configure(DocumentContainerType : AdvisedDocumentContainer!(DocumentType, FieldType, AdvisedConvertor), DocumentType, FieldType, alias AdvisedConvertor)(DocumentContainerType container) {
	return container.configure!(DocumentContainerType, AdvisedConvertor);
}