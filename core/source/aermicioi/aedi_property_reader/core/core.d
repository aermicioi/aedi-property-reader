/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:

	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi_property_reader.core.core;

import aermicioi.aedi.storage.storage;
import aermicioi.aedi.storage.locator;
import aermicioi.aedi_property_reader.convertor.convertor;
import aermicioi.aedi_property_reader.convertor.mapper;
import aermicioi.aedi_property_reader.core.document :
	DocumentContainerImpl = DocumentContainer,
	WithConvertorBuilder,
	WithConvertorsFor,
	WithConvertorSources,
	WithConvertors;
import std.meta;
import std.traits;
import std.experimental.logger;
import std.exception;

/**
Configuration context that is providing a nice api to add convertors into a container for a document.
**/
struct DocumentContainerBuilder
	(DocumentContainer : DocumentContainerImpl!(DocumentType, FieldType), ConvertorBuilder, DocumentType, FieldType)
	if (is(DocumentContainer : Storage!(Convertor, string))) {

	/**
	Builder used to constructo convertors for configured properties.
	**/
	ConvertorBuilder builder;

	/**
	Configured container.
	**/
    DocumentContainer container;

	/**
	Constructor for DocumentContainerBuilder

	Params:
		container = to configure
		builder = convertor builder used to create convertors for properties
	**/
	this(DocumentContainer container, ConvertorBuilder builder) {
		this.container = container;
		this.builder = builder;

		static if (is(DocumentContainer : WithConvertorsFor!Types, Types...)) {
			static foreach (Type; Types) {
				this.register!(Type, Type);
			}
		}

		static if (is(DocumentContainer : WithConvertors!ConvertorsFactory, alias ConvertorsFactory)) {
			foreach (convertor; ConvertorsFactory()) {
				this.register(convertor, convertor.to.toString);
			}
		}
	}

	/**
	ditto
	**/
    alias container this;

	/**
	Associate a convertor to a field in document that has property path, to be used for conversion.

	Params:
		To = the type of destination component that convertor should yield
		path = property path for a field in document.
	**/
    ref typeof(this) register(To)(string path) {

		static if (is(DocumentContainer : WithConvertorSources!SourceTypes, SourceTypes...)) {} else {
			alias SourceTypes = AliasSeq!();
		}

		debug(trace) trace(
			"Injecting convertor for ",
			path,
			" in document container to convert to ",
			typeid(To),
			" using ",
			builder
		);

		this.register(builder.make!(To, FieldType), path);

		static foreach (From; SourceTypes) {

			debug(trace) trace(
				"Injecting convertor for ",
				typeid(From),
				" in document container to convert to ",
				typeid(To),
				" using ",
				builder
			);

			this.register(builder.make!(To, From));
		}

		return this;
    }

	/**
	Associate a convertor to a type to be used by document when no specific convertor is provided for document field.

	Params:
		To = the type of destination component that convertor should yield
	**/
    ref typeof(this) register(To)() {

        return this.register!(To, To);
    }

	/**
	Associate a convertor to a type for an interface to be used by document when no specific convertor is provided for document field.

	Params:
		Iface = interface for which the convertor is bound to.
		To = the type of destination component that convertor should yield
	**/
    ref typeof(this) register(Iface, To : Iface)() {
        import std.traits : fullyQualifiedName;

        return this.register!To(fullyQualifiedName!Iface);
    }

	/**
	Register convertor for a property on path.

	Params:
		convertor = convertor used to convert value found on path
		path = property path for which convertor could be used

	Returns:
		typeof(this)
	**/
	ref typeof(this) register(Convertor convertor, string path) {
		this.container.set(convertor, path);

		return this;
	}

	/**
	ditto
	**/
	ref typeof(this) register(Convertor convertor) {
		this.container.set(convertor);

		return this;
	}

    alias property = register;
}

/**
Take a document container and create a configuration context for it.

Params:
	container = container for which configuration context is created.
	builder = builder used to construct convertors used by container.

Returns:
	DocumentContainerBuilder(DocumentContainer, AdvisedConvertor, DocumentType, FieldType) a configuration context
**/
auto configure(DocumentContainer, ConvertorBuilder)(DocumentContainer container, ConvertorBuilder builder) {
    return DocumentContainerBuilder!(DocumentContainer, ConvertorBuilder)(container, builder);
}

/**
ditto
**/
auto configure
	(DocumentContainer : WithConvertorBuilder!ConvertorBuilderFactory, alias ConvertorBuilderFactory)
	(DocumentContainer container) {

	return DocumentContainerBuilder!(DocumentContainer, ReturnType!ConvertorBuilderFactory)
		(container, ConvertorBuilderFactory([container]));
}

mixin template MapperBuilderMixin(AdvisedConvertors...) {

	struct MapperBuilderImpl(MapperType : Mapper!(To, From), To, From) {

		MapperType mapper;

		alias mapper this;

		ref auto register(To, From)() {
			static foreach (AdvisedConvertor; AdvisedConvertors) {
				static if (is(typeof(AdvisedConvertor.AdvisedConvertorImplementation!(To, From)))) {
					enum converted = true;
					mapper.convertors = mapper.convertors ~ AdvisedConvertor.AdvisedConvertorImplementation!(To, From)();
				}
			}

			static if (is(typeof(converted)) && !converted) {
				static assert("Could not configure mapper with a convertor");
			}

			return this;
		}

		struct WithFrom(With) {

			ref auto register(To)() {
				return register!(To, From);
			}
		}

		struct WithTo(With) {

			ref auto register(From)() {
				return register!(To, From);
			}
		}
	}

	auto configure(MapperType : Mapper!(To, From), To, From)(MapperType mapper) {
		return MapperBuilderImpl!MapperType(mapper);
	}
}