/**
License:
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

Authors:
    Alexandru Ermicioi
**/
module aermicioi.aedi_property_reader.core.help_document;

import aermicioi.aedi_property_reader.core.document;
import aermicioi.aedi.exception;
import std.getopt;

/**
Marker interface for documents able to store and emit help information.
**/
interface WithHelpInformation {

    /**
    Add help information for a component

    Params:
        identity = identity of a component
        description = help description of component

    Returns:
        This
    **/
    WithHelpInformation setDescription(string identity, string description) nothrow pure;

    /**
    Set the title for help info

    Params:
        title = title used to display

    Returns:
        This
    **/
    WithHelpInformation title(string title) nothrow pure;
}

/**
Document container that throws exceptions with helper info in it.
**/
class HelpAwareDocument(T : DocumentContainer!Z, Z...) : Z, WithHelpInformation {

    private DocumentContainer!Z container;
    private Option[] options;

    public {
        @property {

            /**
            Set guesser

            Params:
                guesser = guesser uset to guess the D type of document.

            Returns:
                typeof(this)
            **/
            typeof(this) guesser(TypeGuesser!FieldType guesser) @safe nothrow pure {
                this.container.guesser = guesser;

                return this;
            }

            /**
            Get guesser

            Returns:
                TypeGuesser!FieldType
            **/
            inout(TypeGuesser!FieldType) guesser() @safe nothrow pure inout {
                return this.container.guesser;
            }

            /**
            Set document

            Params:
                document = document representing the root of configuration

            Returns:
                typeof(this)
            **/
            typeof(this) document(DocumentType document) @safe nothrow {
                this.container.document = document;

                return this;
            }

            /**
            Get document

            Returns:
                DocumentType
            **/
            inout(DocumentType) document() @safe nothrow pure inout {
                return this.container.document;
            }

            /**
            Set accessor

            Params:
                accessor = accessor used to navigate through document
            Returns:
                typeof(this)
            **/
            typeof(this) accessor(PropertyAccessor!(DocumentType, FieldType) accessor) @safe nothrow pure {
                this.container.accessor = accessor;

                return this;
            }

            /**
            Get accessor

            Returns:
                PropertyAccessor!(DocumentType, FieldType)
            **/
            inout(PropertyAccessor!(DocumentType, FieldType)) accessor() @safe nothrow pure inout {
                return this.container.accessor;
            }
        }

        /**
        Constructor for help aware decorator

        Params:
            container = decorated container
        **/
        this(DocumentContainer!Z container) {
            this.container = container;
        }

        HelpAwareDocument!T add(string identity, string description) {
            this.options ~= Option(null, identity, description, true);

            return this;
        }

        /**
        Save an element in Storage by key identity.

        Params:
            identity = identity of element in Storage.
            element = element which is to be saved in Storage.

        Return:
            Storage
        **/
        typeof(this) set(Convertor element, string identity) {
            this.container.set(element, identity);
        }

        /**
        ditto
        **/
        typeof(this) set(Convertor convertor) {
            this.container.set(convertor);

            return this;
        }

        /**
        Remove an element from Storage with identity.

        Remove an element from Storage with identity. If there is no element by provided identity, then no action is performed.

        Params:
            identity = the identity of element to be removed.

        Return:
            Storage
        **/
        typeof(this) remove(string identity) {
            this.container.remove(identity);

            return this;
        }

        /**
        Sets up the internal state of container.

        Sets up the internal state of container (Ex, for singleton container it will spawn all objects that locator contains).
        **/
        Container instantiate() @trusted {
            this.container.instantiate();

            return this;
        }

        /**
        Destruct all managed components.

        Destruct all managed components. The method denotes the end of container lifetime, and therefore destruction of all managed components
        by it.
        **/
        Container terminate() @trusted {
            this.container.terminate();

            return this;
        }

        /**
        Get a component that is associated with key.

        Params:
            identity = the element id.

        Throws:
            NotFoundException in case if the element wasn't found.

        Returns:
            Object element if it is available.
        **/
        Object get(string identity) @safe {
            try {

                return container.get(identity);
            } catch (AediException e) {
                foreach (link; e) {
                    NotFoundException notFoundException = cast(NotFoundException) link;
                    if (NotFoundException !is null) {
                        throw new HelperException!(typeof(this))("", this.options);
                    }
                }

                throw e;
            }
        }

        /**
        Check if an element is present in Locator by key id.

        Note:
            This check should be done for elements that locator actually contains, and
            not in chained locator.
        Params:
            identity = identity of element.

        Returns:
            bool true if an element by key is present in Locator.
        **/
        bool has(string identity) inout @trusted {
            return container.has(identity);
        }

        @property {

            /**
            Get the type info of component that convertor can convert from.

            Get the type info of component that convertor can convert from.
            The method is returning the default type that it is able to convert,
            though it is not necessarily limited to this type only. More generalistic
            checks should be done by convertsFrom method.

            Returns:
                type info of component that convertor is able to convert.
            **/
            TypeInfo from() @safe const nothrow pure {
                return this.container.from;
            }

            /**
            Get the type info of component that convertor is able to convert to.

            Get the type info of component that convertor is able to convert to.
            The method is returning the default type that is able to convert,
            though it is not necessarily limited to this type only. More generalistic
            checks should be done by convertsTo method.

            Returns:
                type info of component that can be converted to.
            **/
            TypeInfo to() @safe const nothrow pure {
                return this.container.to;
            }
        }

        /**
        Check whether convertor is able to convert from.

        Check whether convertor is able to convert from.
        The intent of method is to implement customized type checking
        is not limited immediatly to supported default from component.

        Params:
            from = the type info of component that could potentially be converted by convertor.
        Returns:
            true if it is able to convert from, or false otherwise.
        **/
        bool convertsFrom(TypeInfo from) @safe const nothrow pure  {
            return this.container.convertsFrom(from);
        }

        /**
        Check whether convertor is able to convert from.

        Check whether convertor is able to convert from.
        The method will try to extract type info out of from
        object and use for subsequent type checking.
        The intent of method is to implement customized type checking
        is not limited immediatly to supported default from component.

        Params:
            from = the type info of component that could potentially be converted by convertor.
        Returns:
            true if it is able to convert from, or false otherwise.
        **/
        bool convertsFrom(in Object from) @safe const nothrow pure  {
            return this.container.convertsFrom(from);
        }

        /**
        Check whether convertor is able to convert to.

        Check whether convertor is able to convert to.
        The intent of the method is to implement customized type checking
        that is not limited immediatly to supported default to component.

        Params:
            to = type info of component that convertor could potentially convert to.

        Returns:
            true if it is able to convert to, false otherwise.
        **/
        bool convertsTo(TypeInfo to) @safe const nothrow pure  {
            return this.container.convertsTo(to);
        }

        /**
        Check whether convertor is able to convert to.

        Check whether convertor is able to convert to.
        The method will try to extract type info out of to object and use
        for subsequent type checking.
        The intent of the method is to implement customized type checking
        that is not limited immediatly to supported default to component.

        Params:
            to = type info of component that convertor could potentially convert to.

        Returns:
            true if it is able to convert to, false otherwise.
        **/
        bool convertsTo(in Object to) @safe const nothrow pure  {
            return this.container.convertsTo(to);
        }

        /**
        Convert from component to component.

        Params:
            from = original component that is to be converted.
            to = destination object that will be constructed out for original one.
            allocator = optional allocator that could be used to construct to component.
        Throws:
            ConvertorException when there is a converting error
            InvalidArgumentException when arguments passed are not of right type or state
        Returns:
            Resulting converted component.
        **/
        Object convert(in Object from, TypeInfo to, RCIAllocator allocator = theAllocator) const @trusted {
            return this.container.convert(from, to, allocator);
        }

        /**
        Destroy component created using this convertor.

        Destroy component created using this convertor.
        Since convertor could potentially allocate memory for
        converted component, only itself is containing history of allocation,
        and therefore it is responsible as well to destroy and free allocated
        memory with allocator.

        Params:
            converted = component that should be destroyed.
            allocator = allocator used to allocate converted component.
        **/
        void destruct(ref Object converted, RCIAllocator allocator = theAllocator) const @trusted {
            this.container.destruct(converted, allocator);
        }
    }
}

class HelperException : Exception {

    import std.getopt;

    string title;
    Option[] options;

    /**
     * Creates a new instance of Exception. The nextInChain parameter is used
     * internally and should always be $(D null) when passed by user code.
     * This constructor does not automatically throw the newly-created
     * Exception; the $(D throw) statement should be used for that purpose.
     */
    @nogc @safe pure nothrow this(string title, Option[] options, string file = __FILE__, size_t line = __LINE__, Throwable nextInChain = null)
    {
        this.options = options;
        super(msg, file, line, nextInChain);
    }


}

/**
Decorate document container with one with ability to throw exceptions with help info.

Params:
    document = document that needs to be decorated

Returns:
    HelpAwareDocument!T Decorated document
**/
auto withHelp(T : DocumentContainer!Z, Z...)(T document) {
    return new HelpAwareDocument!T(document);
}

/**
Print help error if chain contains a HelperException in it or throw again catched exception

Params:
    e = exception chain in which to check for help aware exception
Throws:
    e the exception itself if no helper exception was found in the chain
**/
void tryPrintHelp(Exception e) {
    foreach (link; e) {
        HelperException helperException = cast(HelperException) link;

        if (helperException !is null) {
            defaultGetoptPrinter(helperException.title, helperException.options);

            return;
        }
    }

    throw e;
}