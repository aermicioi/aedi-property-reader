/**
License:
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

Authors:
    Alexandru Ermicioi
**/
module aermicioi.aedi_property_reader.core.convertor;

import aermicioi.aedi;
import aermicioi.aedi_property_reader.core.exception : ConvertorException;
import aermicioi.aedi.storage.wrapper;
import std.meta;
import std.conv;
import std.experimental.allocator;
import std.exception : enforce;
import aermicioi.aedi_property_reader.core.accessor;
import aermicioi.aedi_property_reader.core.setter;
import aermicioi.aedi_property_reader.core.inspector;
import aermicioi.aedi_property_reader.core.type_guesser;
import std.algorithm;
import std.array;
import std.experimental.logger;

alias FunctionalConvertor(To, From) = void function(in From, ref To, RCIAllocator allocator = theAllocator);
alias DelegateConvertor(To, From) = void delegate(in From, ref To, RCIAllocator allocator = theAllocator);

alias RuntimeFunctionalConvertor(To, From) = void function(in From, ref To, Convertor convertor, RCIAllocator allocator = theAllocator);
alias RuntimeDelegateConvertor(To, From) = void delegate(in From, ref To, Convertor convertor, RCIAllocator allocator = theAllocator);

template isConvertor(alias T) {
    static if (is(typeof(&T) : void function(in Y, ref X, RCIAllocator), Y, X) || is(typeof(&T) : void delegate(in Y, ref X, RCIAllocator), Y, X)) {
        enum bool Yes = true;

        alias To = X;
        alias From = Y;
    } else {

        enum bool Yes = false;
    }
}

template isConvertor(alias T, To, From) {
    static if (isConvertor!T.Yes && is(isConvertor!T.To == To) && is(isConvertor!T.From == From)) {
        alias isConvertor = isConvertor!T;
    } else {
        enum Yes = false;
    }
}

template maybeConvertor(alias T, To, From) {
    static if (isConvertor!(T!(To, From)).Yes) {
        enum Yes = true;
        alias Convertor = T!(To, From);
        alias Info = isConvertor!Convertor;
    } else {
        enum Yes = false;
    }
}

template isRuntimeConvertor(alias T) {
    static if (is(typeof(&T) : void function(in Y, ref X, Convertor, RCIAllocator), Y, X) || is(typeof(&T) : void delegate(in Y, ref X, Convertor, RCIAllocator), Y, X)) {
        enum bool Yes = true;

        alias To = X;
        alias From = Y;
    } else {

        enum bool Yes = false;
    }
}

template isRuntimeConvertor(alias T, To, From) {
    static if (isRuntimeConvertor!T.Yes && is(isConvertor!T.To == To) && is(isRuntimeConvertor!T.From == From)) {
        alias isRuntimeConvertor = isRuntimeConvertor!T;
    } else {
        enum Yes = false;
    }
}

template maybeRuntimeConvertor(alias T, To, From) {
    static if (isRuntimeConvertor!(T!(To, From)).Yes) {
        enum Yes = true;
        alias Convertor = T!(To, From);
        alias Info = isRuntimeConvertor!Convertor;
    } else {
        enum Yes = false;
    }
}

alias FunctionalDestructor(To) = void function (ref To, RCIAllocator = theAllocator);
alias DelegateDestructor(To) = void delegate (ref To, RCIAllocator = theAllocator);

template isDestructor(alias T) {
    static if (is(typeof(&T) : void function (ref X, RCIAllocator = theAllocator), X) || is(typeof(&T) : void delegate (ref X, RCIAllocator = theAllocator), X)) {
        enum bool Yes = true;

        alias To = X;
    } else {

        enum bool Yes = false;
    }
}

template isDestructor(T, To) {
    static if (isDestructor!T.Yes && is(isDestructor!T.To == To)) {
        alias isDestructor = isDestructor!T;
    } else {
        enum Yes = false;
    }
}

template maybeDestructor(alias T, To) {
    static if (isDestructor!(T!To).Yes) {
        enum Yes = true;
        alias Destructor = T!(To);
        alias Info = isDestructor!Destructor;
    } else {
        enum Yes = false;
    }
}

alias RuntimeFunctionalDestructor(To) = void function (ref To, Convertor, RCIAllocator = theAllocator);
alias RuntimeDelegateDestructor(To) = void delegate (ref To, Convertor, RCIAllocator = theAllocator);

template isRuntimeDestructor(alias T) {
    static if (is(typeof(&T) : void function (ref X, Convertor, RCIAllocator), X) || is(typeof(&T) : void delegate (ref X, Convertor, RCIAllocator), X)) {
        enum bool Yes = true;

        alias To = X;
    } else {

        enum bool Yes = false;
    }
}

template isRuntimeDestructor(T, To) {
    static if (isRuntimeDestructor!T.Yes && is(isRuntimeDestructor!T.To == To)) {
        alias isRuntimeDestructor = isRuntimeDestructor!T;
    } else {
        enum Yes = false;
    }
}

template maybeRuntimeDestructor(alias T, To) {
    static if (isRuntimeDestructor!(T!To).Yes) {
        enum Yes = true;
        alias Destructor = T!(To);
        alias Info = isRuntimeDestructor!Destructor;
    } else {
        enum Yes = false;
    }
}

interface Convertor {
    @property {
        TypeInfo from() const;
        TypeInfo to() const;
    }

    bool convertsFrom(TypeInfo from) const;
    bool convertsFrom(in Object from) const;
    bool convertsTo(TypeInfo to) const;
    bool convertsTo(in Object to) const;

    Object convert(in Object from, TypeInfo to, RCIAllocator allocator = theAllocator);
    void destruct(ref Object converted, RCIAllocator allocator = theAllocator);
}

class CallbackConvertor(alias convertor, alias destructor) : Convertor
    if (isConvertor!convertor.Yes && isDestructor!destructor.Yes) {

    private {
        alias Info = isConvertor!convertor;
    }

    public {

        @property {
            /**
            Get from

            Returns:
                TypeInfo
            **/
            TypeInfo from() @safe nothrow pure const {
                return typeid(Info.From);
            }

            /**
            Get to

            Returns:
                TypeInfo
            **/
            TypeInfo to() @safe nothrow pure const {
                return typeid(Info.To);
            }
        }

        bool convertsFrom(TypeInfo from) const {
            return typeid(Info.From) is from;
        }

        bool convertsFrom(in Object from) const {
            return this.convertsFrom(from.identify);
        }

        bool convertsTo(TypeInfo to) const {
            return typeid(Info.To) is to;
        }

        bool convertsTo(in Object to) const {
            return this.convertsTo(to.identify);
        }

        Object convert(in Object from, TypeInfo to, RCIAllocator allocator = theAllocator)
        {
            enforce!ConvertorException(this.convertsTo(to), text(to, " is not supported by convertor expected ", typeid(Info.To)));
            enforce!ConvertorException(this.convertsFrom(from), text(from.identify, " is not supported by convertor expected ", typeid(Info.From)));

            Info.From naked;

            static if (is(From : Object)) {
                naked = cast(From) from;

                if (naked is null) {
                    throw new ConvertorException(text("Cannot convert ", from.classinfo, " only supported ", this.from));
                }
            } else {

                auto wrapper = (cast(Placeholder!(Info.From)) from);

                if (wrapper is null) {
                    throw new ConvertorException(text("Cannot convert ", from.identify, " only supported ", this.from));
                }

                naked = wrapper.value;
            }


            static if (is(Info.To : Object)) {
                Info.To placeholder = make!(Info.To);

                convertor(naked, placeholder, allocator);
            } else {
                PlaceholderImpl!(Info.To) placeholder = allocator.make!(PlaceholderImpl!(Info.To))(Info.To.init);

                convertor(naked, placeholder.value, allocator);
            }

            return placeholder;
        }

        void destruct(ref Object converted, RCIAllocator allocator = theAllocator) {
            static if (is(Info.To : Object)) {

                destructor(converted, allocator);
            } else {
                auto container = cast(Placeholder!(Info.To)) converted;

                destructor(container.value);
                allocator.dispose(converted);
            }
        }
    }
}

class RuntimeConvertor(alias convertor, alias destructor)
    if (isRuntimeConvertor!convertor && isRuntimeDestructor!destructor) {

    private {
        alias Info = isRuntimeConvertor!convertor;

        Convertor convertor_;
    }

    public {

        @property {
            /**
            Set convertor

            Params:
                convertor = convertor passed to runtime converting callback for optionall use in converting complex components.

            Returns:
                typeof(this)
            **/
            typeof(this) convertor(Convertor convertor) @safe nothrow pure {
                this.convertor_ = convertor;

                return this;
            }

            /**
            Get convertor

            Returns:
                Convertor
            **/
            inout(Convertor) convertor() @safe nothrow pure inout {
                return this.convertor_;
            }

            /**
            Get from

            Returns:
                TypeInfo
            **/
            TypeInfo from() @safe nothrow pure const {
                return typeid(Info.From);
            }

            /**
            Get to

            Returns:
                TypeInfo
            **/
            TypeInfo to() @safe nothrow pure const {
                return typeid(Info.To);
            }
        }

        bool convertsFrom(TypeInfo from) const {
            return typeid(Info.From) is from;
        }

        bool convertsFrom(in Object from) const {
            return this.convertsFrom(from.identify);
        }

        bool convertsTo(TypeInfo to) const {
            return typeid(Info.To) is to;
        }

        bool convertsTo(in Object to) const {
            return this.convertsTo(to.identify);
        }

        Object convert(in Object from, TypeInfo to, RCIAllocator allocator = theAllocator)
        {
            enforce!ConvertorException(this.convertsTo(to), text(to, " is not supported by convertor expected ", typeid(Info.To)));
            enforce!ConvertorException(this.convertsFrom(from), text(this.unwrap(from), " is not supported by convertor expected ", typeid(Info.From)));

            Info.From naked;

            static if (is(From : Object)) {
                naked = cast(From) from;

                if (naked is null) {
                    throw new ConvertorException(text("Cannot convert ", from.classinfo, " only supported ", this.from));
                }
            } else {

                auto wrapper = (cast(Placeholder!(Info.From)) from);

                if (wrapper is null) {
                    throw new ConvertorException(text("Cannot convert ", from.identify, " only supported ", this.from));
                }

                naked = wrapper.value;
            }


            static if (is(Info.To : Object)) {
                Info.To placeholder = make!(Info.To);

                convertor(naked, placeholder, convertor, allocator);
            } else {
                PlaceholderImpl!(Info.To) placeholder = allocator.make!(PlaceholderImpl!(Info.To))(Info.To.init);

                convertor(naked, placeholder.value, convertor, allocator);
            }

            return placeholder;
        }

        void destruct(ref Object converted, RCIAllocator allocator = theAllocator) {
            static if (is(Info.To : Object)) {

                destructor(converted, this.convertor, allocator);
            } else {
                auto container = cast(Placeholder!(Info.To)) converted;

                destructor(container.value, this.convertor);
                allocator.dispose(converted);
            }
        }
    }
}

class AggregateConvertor : Convertor {
    import std.algorithm;

    private {
        Convertor[] convertors_;
    }

    public {

        /**
        Default constructor for AggregateConvertor
        **/
        this(Convertor[] convertors...) {
            this.convertors = convertors.dup;
        }

        /**
        Set convertors

        Params:
            convertors = convertors used to convert from one type to another

        Returns:
            typeof(this)
        **/
        typeof(this) convertors(Convertor[] convertors) @safe nothrow pure {
            this.convertors_ = convertors;

            return this;
        }

        /**
        Get convertors

        Returns:
            Convertor[]
        **/
        inout(Convertor[]) convertors() @safe nothrow pure inout {
            return this.convertors_;
        }

        @property {
            /**
            Get from

            Returns:
                TypeInfo
            **/
            TypeInfo from() @safe nothrow pure const {
                return typeid(void);
            }

            /**
            Get to

            Returns:
                TypeInfo
            **/
            TypeInfo to() @safe nothrow pure const {
                return typeid(void);
            }
        }

        bool convertsFrom(TypeInfo from) const {
            return this.convertors.canFind!(c => c.convertsFrom(from));
        }

        bool convertsFrom(in Object from) const {
            return this.convertors.canFind!(c => c.convertsFrom(from));
        }

        bool convertsTo(TypeInfo to) const {
            return this.convertors.canFind!(c => c.convertsTo(to));
        }

        bool convertsTo(in Object to) const {
            return this.convertors.canFind!(c => c.convertsTo(to));
        }

        Object convert(in Object from, TypeInfo to, RCIAllocator allocator = theAllocator)
        {
            auto convertors = this.convertors.find!(c => c.convertsFrom(from) && c.convertsTo(to));

            if (!convertors.empty) {
                return convertors[0].convert(from, to, allocator);
            }

            throw new ConvertorException(text("Could not convert ", typeid(from), " to type ", to));
        }

        void destruct(ref Object converted, RCIAllocator allocator = theAllocator) {
            auto convertors = this.convertors.find!(c => c.convertsFrom(from) && c.convertsTo(to));

            if (convertors.empty) {
                throw new ConvertorException(text("Could not destroy ", converted));
            }

            convertors[0].destruct(converted, allocator);
        }
    }
}

class NoOpConvertor : Convertor {
    import std.algorithm;

    public {
        @property {
            /**
            Get from

            Returns:
                TypeInfo
            **/
            TypeInfo from() @safe nothrow pure const {
                return typeid(Object);
            }

            /**
            Get to

            Returns:
                TypeInfo
            **/
            TypeInfo to() @safe nothrow pure const {
                return typeid(Object);
            }
        }

        bool convertsFrom(TypeInfo from) const {
            return this.from is from;
        }

        bool convertsFrom(in Object from) const {
            return this.convertsTo(typeid(from));
        }

        bool convertsTo(TypeInfo to) const {
            return this.to is from;
        }

        bool convertsTo(in Object to) const {
            return this.convertsTo(typeid(to));
        }

        Object convert(in Object from, TypeInfo to, RCIAllocator allocator = theAllocator)
        {
            return cast() from;
        }

        void destruct(ref Object converted, RCIAllocator allocator = theAllocator) {

        }
    }
}

To convert(To, From)(Convertor convertor, From from, RCIAllocator allocator = theAllocator) {
    import std.typecons : scoped;
    static if (is(From : Object)) {

        Object converted = convertor.convert(from, typeid(To), allocator);
    } else {

        Object converted = convertor.convert(scoped!(PlaceholderImpl!From)(from), typeid(To), allocator);
    }

    static if (is(To : Object)) {

        return cast(To) converted;
    } else {

        scope(exit) allocator.dispose(converted);
        return (cast(Placeholder!To) converted).value;
    }
}

interface Placeholder(T) : TypeAware {

    @property {

        ref inout(T) value() nothrow @safe inout;
        ref T value(ref T value) nothrow @safe;

        final ref T value(T value) {
            return this.value(value);
        }

        alias value this;
    }
}

interface TypeAware {
    TypeInfo type() const nothrow @property;
}

class PlaceholderImpl(T) : Placeholder!T, Wrapper!T {

    private {
        T payload;
    }

    this() @disable;

    this(ref T value) {
        this.value = value;
    }

    this(T value) {
        this(value);
    }

    TypeInfo type() const {
        return typeid(T);
    }

    @property {
        /**
        Set value

        Params:
            value = value to be stored

        Returns:
            value
        **/
        ref T value(ref T value) @safe nothrow {
            this.payload = value;

            return this.payload;
        }

        /**
        Get value

        Returns:
            ref T
        **/
        ref inout(T) value() @safe nothrow inout {
            return this.payload;
        }
    }
}

auto placeholder(T)(auto ref T value, RCIAllocator allocator = theAllocator) {
    static if (is(T : Object)) {
        return value;
    } else {
        return allocator.make!(PlaceholderImpl!T)(value);
    }
}

auto unwrap(T)(inout(Object) object) nothrow {
    import aermicioi.aedi_property_reader.core.traits : n;
    static if (is(T : Object)) {

        return cast(T) object;
    } else {

        auto wrapper = (cast(Placeholder!T) object);

        assert(wrapper !is null, text(object.classinfo, " does not implement ", typeid(Placeholder!T), " ", typeid(T), " content cannot be extracted")).n;

        return wrapper;
    }
}

TypeInfo identify(T : Object)(in T object) nothrow {
    if (object is null) {
        return typeid(null);
    }

    TypeAware p = cast(TypeAware) object;

    if (p !is null) {
        return p.type;
    }

    return object.classinfo;
}

TypeInfo identify(T)(in T type)
    if (!is(T : Object)) {

    return typeid(T);
}

template AdvisedConvertor(alias convertor, alias destructor) {
    import std.traits;

    template AdvisedConvertor(To, From) {
        alias ConvertorInfo = maybeConvertor!(convertor, To, From);
        alias DestructorInfo = maybeDestructor!(destructor, To);

        static if (ConvertorInfo.Yes && DestructorInfo.Yes) {

            alias AdvisedConvertor = () => new CallbackConvertor!(ConvertorInfo.Convertor, DestructorInfo.Destructor);
        } else {

            import std.traits : fullyQualifiedName;
            static assert(false, text(
                "Cannot convert type ",
                fullyQualifiedName!From,
                " to ",
                fullyQualifiedName!To,
                " when ",
                fullyQualifiedName!convertor,
                " implements convertor ",
                ConvertorInfo.Yes,
                " ",
                fullyQualifiedName!destructor,
                " implements destructor ",
                DestructorInfo.Yes
                ));
        }
    }
}

template AdvisedConvertor(alias Accessor, alias Setter, alias FromInspector, alias ToInspector) {
    template AdvisedConvertor(To, From)
        if (isAggregate!To && isAggregate!From) {

        static if (
            is (typeof(Accessor!From)) &&
            is (typeof(Setter!To)) &&
            is (typeof(FromInspector!From)) &&
            is (typeof(ToInspector!To))
        ) {
            alias AdvisedConvertor = () => {
                import aermicioi.aedi_property_reader.core.mapper : CompositeMapper;
                import aermicioi.aedi_property_reader.core.inspector : Inspector;
                import aermicioi.aedi_property_reader.core.accessor : CompositeAccessor;
                import aermicioi.aedi_property_reader.core.setter : CompositeSetter;

                auto convertor = new CompositeConvertor!(To, From)();
                CompositeMapper!(From, To) mapper = new CompositeMapper!(From, To)();
                mapper.fromInspector = new FromInspector!From;
                mapper.toInspector = new ToInspector!To;
                mapper.accessor = new Accessor!From;
                mapper.setter = new Setter!To;
                convertor.mapper = mapper;
                return convertor;
            };
        } else {

            import std.traits : fullyQualifiedName;
            static assert(false, text(
                "Cannot convert type ",
                fullyQualifiedName!From,
                " to ",
                fullyQualifiedName!To,
                " when ",
                fullyQualifiedName!Accessor,
                " is able to access ",
                is (typeof(Accessor!From)),
                ", ",
                fullyQualifiedName!Setter,
                " is able to set ",
                is (typeof(Setter!To)),
                ", ",
                fullyQualifiedName!FromInspector,
                " is able to inspect ",
                is (typeof(FromInspector!From)),
                ", ",
                fullyQualifiedName!ToInspector,
                " is able to inspect ",
                is (typeof(ToInspector!To))
            ));
        }
    }
}

alias CompositeConvertor = AdvisedConvertor!(
    CompositeAccessor,
    CompositeSetter,
    CompositeInspector,
    CompositeInspector
);