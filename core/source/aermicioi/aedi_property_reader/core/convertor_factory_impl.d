/**
License:
	Boost Software License - Version 1.0 - August 17th, 2003

	Permission is hereby granted, free of charge, to any person or organization
	obtaining a copy of the software and accompanying documentation covered by
	this license (the "Software") to use, reproduce, display, distribute,
	execute, and transmit the Software, and to prepare derivative works of the
	Software, and to permit third-parties to whom the Software is furnished to
	do so, all subject to the following:

	The copyright notices in the Software and this entire statement, including
	the above license grant, this restriction and the following disclaimer,
	must be included in all copies of the Software, in whole or in part, and
	all derivative works of the Software, unless such copies or derivative
	works are solely in the form of machine-executable object code generated by
	a source language processor.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
	DEALINGS IN THE SOFTWARE.

Authors:
	aermicioi
**/
module aermicioi.aedi_property_reader.core.convertor_factory_impl;

import aermicioi.aedi.storage.decorator;
import aermicioi.aedi.storage.locator;
import aermicioi.aedi.storage.wrapper;
import aermicioi.aedi_property_reader.core.convertor_factory;
import aermicioi.aedi_property_reader.core.type_guesser;
import aermicioi.aedi_property_reader.core.exception;

/**
A factory that wraps any convertor factory into an interface that is compliant with generic convertor container, and rest of aedi containers.
**/
class ObjectWrappingConvertorFactory(T : ConvertorFactory!(FromType, ToType), FromType, ToType) :
	ConvertorFactory!(FromType, Object), MutableDecorator!T {

    private {
        T decorated_;
    }

    public {

		/**
		Constructor for ObjectWrappingConvertorFactory!(T, FromType, ToType)

		Params:
			factory = wrapped factory
		**/
        this(T factory) {
            this.decorated = factory;
        }

        @property {
			/**
			Set decorated

			Params:
				decorated = factory that is wrapped

			Returns:
				typeof(this)
			**/
            ObjectWrappingConvertorFactory!T decorated(T decorated) @safe nothrow {
            	this.decorated_ = decorated;

            	return this;
            }

			/**
			Get decorated

			Returns:
				T
			**/
            T decorated() @safe nothrow {
            	return this.decorated_;
            }

			/**
			Set convertible

			Params:
				convertible = data that the factory should convert into ToType component
			Returns:
				ConvertorFactory!(FromType, ToType)
			**/
        	ObjectWrappingConvertorFactory!T convertible(FromType convertible) @safe nothrow {
        		this.decorated.convertible = convertible;

        		return this;
        	}

			/**
			Get convertible data

			Returns:
				FromType
			**/
        	FromType convertible() @safe nothrow {
        		return this.decorated.convertible;
        	}

			/**
    		Get the type info of T that is created.

    		Returns:
    			TypeInfo object of created component.
    		**/
        	TypeInfo type() {
        	    return decorated.type;
        	}

			/**
			Set a locator to object.

			Params:
				locator = the locator that is set to oject.

			Returns:
				ObjectWrappingConvertorFactory!T
			**/
        	ObjectWrappingConvertorFactory!T locator(Locator!() locator) {
        		this.decorated.locator = locator;

        		return this;
        	}
        }

		/**
		Instantiates component of type T.

		Returns:
			T instantiated component.
		**/
        Object factory() {

            static if (is(ToType : Object)) {
                return this.decorated.factory;
            } else {

                return new WrapperImpl!ToType(this.decorated.factory);
            }

        }
    }
}

class TypeGuessingConvertorFactory(FromType) : ConvertorFactory!(FromType, Object) {

	private {

		TypeGuesser!FromType guesser_;
		Locator!(ConvertorFactory!(FromType, Object), TypeInfo) convertors_;
		Locator!() locator_;
		FromType convertible_;
	}

	public {

		@property {
			/**
			Set convertible

			Params:
				convertible = initial represenation of a component that is to be converted in another representation

			Returns:
				typeof(this)
			**/
			typeof(this) convertible(FromType convertible) @safe nothrow {
				this.convertible_ = convertible;

				return this;
			}

			/**
			Get convertible

			Returns:
				FromType
			**/
			FromType convertible() @safe nothrow {
				return this.convertible_;
			}

			/**
			Set convertors

			Params:
				convertors = locator of convertor factories by their type
			Throws:

			Returns:
				typeof(this)
			**/
			typeof(this) convertors(Locator!(ConvertorFactory!(FromType, Object), TypeInfo) convertors) @safe nothrow pure {
				this.convertors_ = convertors;

				return this;
			}

			/**
			Get convertors

			Returns:
				Locator!(ConvertorFactory!(FromType, Object), TypeInfo) convertors		**/
			Locator!(ConvertorFactory!(FromType, Object), TypeInfo) convertors() @safe nothrow pure {
				return this.convertors_;
			}

			/**
			Set guesser

			Params:
				guesser = inspects serialized component to detect the type it contains

			Returns:
				typeof(this)
			**/
			typeof(this) guesser(TypeGuesser!FromType guesser) @safe nothrow pure {
				this.guesser_ = guesser;

				return this;
			}

			/**
			Get guesser

			Returns:
				TypeGuesser!FromType
			**/
			TypeGuesser!FromType guesser() @safe nothrow pure {
				return this.guesser_;
			}

			/**
			Get the type info of T that is created.

			Returns:
				TypeInfo object of created component.
			**/
			TypeInfo type() {
				return this.guesser.guess(this.convertible);
			}

			/**
			Set a locator to object.

			Params:
				locator = the locator that is set to oject.

			Returns:
				ObjectWrappingConvertorFactory!T
			**/
			TypeGuessingConvertorFactory!FromType locator(Locator!() locator) {
				this.locator = locator;

				return this;
			}

			/**
			Get locator

			Returns:
				Locator!()
			**/
			Locator!() locator() @safe nothrow pure {
				return this.locator_;
			}
		}

		/**
		Instantiates component of type T.

		Returns:
			T instantiated component.
		**/
		Object factory() {

			ConvertorFactory!(FromType, Object) convertor = this.convertors.get(
				this.guesser.guess(
					this.convertible
				)
			);

			scope(exit) {
				convertor.convertible = FromType.init;
				convertor.locator = null;
			}

			convertor.convertible = this.convertible;
			convertor.locator = this.locator;

			return convertor.factory;
		}
	}
}

/**
A convertor factory that uses conv.to method to convert From into To types.

Params:
	From = original representation form of data to be converted.
	To = type of component that is built based on FromType data.
**/
class StdConvConvertorFactory(To, From : string = string) : ConvertorFactory!(From, To) {
	import std.conv;
    private {

        Locator!() locator_;
        From convertible_;
    }

    public {

        @property {
			/**
			Set convertible

			Params:
				convertible = data that the factory should convert into To component
			Returns:
				StdConvConvertorFactory!(To, From)
			**/
        	StdConvConvertorFactory!(To, From) convertible(From convertible) @safe nothrow {
        		this.convertible_ = convertible;

        		return this;
        	}

			/**
			Get convertible data

			Returns:
				FromType
			**/
        	From convertible() @safe nothrow {
        		return this.convertible_;
        	}

			/**
    		Get the type info of To that is created.

    		Returns:
    			TypeInfo object of created component.
    		**/
        	TypeInfo type() {
        	    return typeid(To);
        	}

			/**
			Set a locator to object.

			Params:
				locator = the locator that is set to oject.

			Returns:
				LocatorAware.
			**/
        	StdConvConvertorFactory!(To, From) locator(Locator!() locator) @safe nothrow {
        		this.locator_ = locator;

        		return this;
        	}
        }

		/**
		Instantiates component of type To.

		Returns:
			To instantiated component.
		**/
        To factory() {
			try {

            	return this.convertible.to!To;
			} catch (ConvException e) {
				throw new ConvertorException("Failed to convert property due to " ~ e.msg, e);
			}
        }
    }
}