/**
License:
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

Authors:
    Alexandru Ermicioi
**/
module aermicioi.aedi_property_reader.core.mapper;

import aermicioi.aedi_property_reader.core.exception;
import aermicioi.aedi_property_reader.core.convertor;
import aermicioi.aedi_property_reader.core.inspector;
import aermicioi.aedi_property_reader.core.setter;
import aermicioi.aedi_property_reader.core.accessor;
import aermicioi.aedi_property_reader.core.placeholder;
import std.experimental.allocator;
import std.experimental.logger;
import std.exception;
import std.algorithm;
import std.conv;

interface Mapper(From, To = From) {

    void map(From from, ref To to, RCIAllocator allocator = theAllocator);
}

class CompositeMapper(From, To) : Mapper!(From, To) {

    private {
        import std.typecons : Rebindable;
        bool conversion_;
        bool force_;

        Convertor[] convertors_;

        Rebindable!(const PropertySetter!(To, Object)) setter_;
        Rebindable!(const PropertyAccessor!(From, Object)) accessor_;
        Rebindable!(const Inspector!From) fromInspector_;
        Rebindable!(const Inspector!To) toInspector_;
    }

    public {

        @property {
            /**
            Set convertors

            Params:
                convertors = a list of optional convertors used to convert from one format to another one

            Returns:
                typeof(this)
            **/
            typeof(this) convertors(Convertor[] convertors) @safe nothrow pure {
                this.convertors_ = convertors;

                return this;
            }

            /**
            Get convertors

            Returns:
                Convertor[]
            **/
            inout(Convertor[]) convertors() @safe nothrow pure inout {
                return this.convertors_;
            }

            /**
            Set conversion

            Params:
                conversion = wether to convert or not values using convertors.

            Returns:
                typeof(this)
            **/
            typeof(this) conversion(bool conversion) @safe nothrow pure {
                this.conversion_ = conversion;

                return this;
            }

            /**
            Get conversion

            Returns:
                bool
            **/
            inout(bool) conversion() @safe nothrow pure inout {
                return this.conversion_;
            }

            /**
            Set setter

            Params:
                setter = setter used to pass values to component.

            Returns:
                typeof(this)
            **/
            typeof(this) setter(in PropertySetter!(To, Object) setter) @safe nothrow pure {
                this.setter_ = setter;

                return this;
            }

            /**
            Get setter

            Returns:
                PropertySetter!(To, Object)
            **/
            inout(const PropertySetter!(To, Object)) setter() @safe nothrow pure inout {
                return this.setter_.get;
            }

            /**
            Set accessor

            Params:
                accessor = property accessor used to extract values from mapped component

            Returns:
                typeof(this)
            **/
            typeof(this) accessor(in PropertyAccessor!(From, Object) accessor) @safe nothrow pure {
                this.accessor_ = accessor;

                return this;
            }

            /**
            Get accessor

            Returns:
                PropertyAccessor!(From, Object)
            **/
            inout(const PropertyAccessor!(From, Object)) accessor() @safe nothrow pure inout {
                return this.accessor_.get;
            }

            /**
            Set fromInspector

            Params:
                fromInspector = inspector providing information about mapped component

            Returns:
                typeof(this)
            **/
            typeof(this) fromInspector(in Inspector!From fromInspector) @safe nothrow pure {
                this.fromInspector_ = fromInspector;

                return this;
            }

            /**
            Get fromInspector

            Returns:
                Inspector!From
            **/
            inout(const Inspector!From) fromInspector() @safe nothrow pure inout {
                return this.fromInspector_.get;
            }

            /**
            Set toInspector

            Params:
                toInspector = inspector used to provide information about component that will store mapped data

            Returns:
                typeof(this)
            **/
            typeof(this) toInspector(in Inspector!To toInspector) @safe nothrow pure {
                this.toInspector_ = toInspector;

                return this;
            }

            /**
            Get toInspector

            Returns:
                Inspector!To
            **/
            inout(const Inspector!To) toInspector() @safe nothrow pure inout {
                return this.toInspector_.get;
            }

            /**
            Set force

            Params:
                force = whether to force attempt in setting a property in a mapped component

            Returns:
                typeof(this)
            **/
            typeof(this) force(bool force) @safe nothrow pure {
                this.force_ = force;

                return this;
            }

            /**
            Get force

            Returns:
                bool
            **/
            inout(bool) force() @safe nothrow pure inout {
                return this.force_;
            }
        }

        void map(From from, ref To to, RCIAllocator allocator = theAllocator) {

            trace("Mapping ", this.fromInspector.properties(from), " of ", from.identify, " to ", to.identify);
            foreach (property; this.fromInspector.properties(from)) {

                trace("Migrating ", property, " property ");
                if (this.toInspector.has(to, property) || this.force) {

                    Object value = this.accessor.access(from, property);
                    if (this.fromInspector.typeOf(from, property) != this.toInspector.typeOf(to, property)) {
                        if (this.conversion) {
                            trace(
                                property,
                                " type differs in original component and destination component, ",
                                this.fromInspector.typeOf(from, property), " and ",
                                this.toInspector.typeOf(to, property)
                            );

                            auto compatible = convertors.filter!(c =>
                                c.convertsFrom(this.fromInspector.typeOf(from, property)) &&
                                c.convertsTo(this.toInspector.typeOf(to, property))
                            );

                            enforce!ConvertorException(!compatible.empty, text(
                                "Could not find convertor to convert ", property, " from ", this.fromInspector.typeOf(from, property),
                                " to ", this.toInspector.typeOf(to, property)
                            ));

                            trace("Found convertor for ", property, " from ", compatible.front.from, " to ", compatible.front.to);

                            value = compatible.front.convert(value, this.toInspector.typeOf(to, property), allocator);
                        } else {

                            throw new InvalidArgumentException(text(
                                "Invalid assignment ", property, " has type of ", this.fromInspector.typeOf(from, property),
                                " in from component while in to component it has ", this.toInspector.typeOf(to, property)
                            ));
                        }
                    }

                    try {

                        this.setter.set(
                            to,
                            value,
                            property
                        );

                        trace("Migrated ", property, " from ", from.identify, " to ", to.identify);
                    } catch (Exception e) {

                        trace("Couldn't ", this.force ? "forcefully " : "", "set property ", property, " to ", to.identify, " from ", from.identify);
                    }
                } else {

                    error(to.identify, " element does not have ", property);
                }
            }
        }
    }
}

class CompositeConvertor(To, From) : Convertor {

    private {
        Mapper!(From, To) mapper_;
    }

    public {
        @property {
            /**
            Set mapper

            Params:
                mapper = mapper used to map from component to component

            Returns:
                typeof(this)
            **/
            typeof(this) mapper(Mapper!(From, To) mapper) @safe nothrow pure {
                this.mapper_ = mapper;

                return this;
            }

            /**
            Get mapper

            Returns:
                Mapper!(From, To)
            **/
            inout(Mapper!(From, To)) mapper() @safe nothrow pure inout {
                return this.mapper_;
            }

            TypeInfo from() const {
                return typeid(From);
            }

            TypeInfo to() const {
                return typeid(To);
            }
        }

        bool convertsFrom(TypeInfo from) const {
            return this.from is from;
        }

        bool convertsFrom(in Object from) const {
            return this.convertsFrom(from.identify);
        }

        bool convertsTo(TypeInfo to) const {
            return this.to is to;
        }

        bool convertsTo(in Object to) const {
            return this.convertsTo(to.identify);
        }

        Object convert(in Object from, TypeInfo to, RCIAllocator allocator = theAllocator) {
            enforce!InvalidArgumentException(this.convertsFrom(from), text(
                "Cannot convert ", from.identify, " to ", typeid(To), " not supported by ", typeid(this)
            ));

            static if (is(To : Object)) {
                To placeholder = allocator.make!To;
            } else {
                Placeholder!To placeholder = allocator.make!(PlaceholderImpl!To)(To.init);
            }

            this.mapper.map(from.unwrap!From, to, allocator);
        }

        void destruct(ref Object converted, RCIAllocator allocator = theAllocator) {
            enforce!InvalidArgumentException(this.convertsFrom(from), text(
                "Cannot destruct ", from.identify, " to ", typeid(To), " not supported by ", typeid(this)
            ));

            allocator.dispose(converted);
            converted = Object.init;
        }
    }
}

class RuntimeMapper : Mapper!(Object, Object) {

    private {
        PropertyAccessor!Object[] accessors_;
        PropertySetter!Object[] setters_;
        Inspector!Object[] inspectors_;
        Mapper!Object delegate (
            in PropertyAccessor!Object,
            in PropertySetter!Object,
            in Inspector!Object,
            in Inspector!Object
        ) factory_;

        void delegate(Mapper!Object) destructor_;
    }

    public {
        @property {
            /**
            Set factory

            Params:
                factory = factory used to create a mapper

            Returns:
                typeof(this)
            **/
            typeof(this) factory(Mapper!Object delegate (
                    in PropertyAccessor!Object,
                    in PropertySetter!Object,
                    in Inspector!Object,
                    in Inspector!Object
                ) factory) @safe nothrow pure {
                this.factory_ = factory;

                return this;
            }

            /**
            Get factory

            Returns:
                Mapper!Object delegate ()
            **/
            inout(Mapper!Object delegate (
                in PropertyAccessor!Object,
                in PropertySetter!Object,
                in Inspector!Object,
                in Inspector!Object
            )) factory() @safe nothrow pure inout {
                return this.factory_;
            }

            /**
            Set destructor

            Params:
                destructor = destructor used to destroy created mapper

            Returns:
                typeof(this)
            **/
            typeof(this) destructor(void delegate(Mapper!Object) destructor) @safe nothrow pure {
                this.destructor_ = destructor;

                return this;
            }

            /**
            Get destructor

            Returns:
                void delegate(Mapper!Object)
            **/
            inout(void delegate(Mapper!Object)) destructor() @safe nothrow pure inout {
                return this.destructor_;
            }

            /**
            Set accessors

            Params:
                accessors = list of runtime accessors used to access data

            Returns:
                typeof(this)
            **/
            typeof(this) accessors(PropertyAccessor!Object[] accessors) @safe nothrow pure {
                this.accessors_ = accessors;

                return this;
            }

            /**
            Get accessors

            Returns:
                PropertyAccessor!Object[]
            **/
            inout(PropertyAccessor!Object[]) accessors() @safe nothrow pure inout {
                return this.accessors_;
            }

            /**
            Set setters

            Params:
                setters = list of runtime setters used to map from one to another

            Returns:
                typeof(this)
            **/
            typeof(this) setters(PropertySetter!Object[] setters) @safe nothrow pure {
                this.setters_ = setters;

                return this;
            }

            /**
            Get setters

            Returns:
                PropertySetter!Object[]
            **/
            inout(PropertySetter!Object[]) setters() @safe nothrow pure inout {
                return this.setters_;
            }

            /**
            Set inspectors

            Params:
                inspectors = list of runtime inspectors used to inspect various components

            Returns:
                typeof(this)
            **/
            typeof(this) inspectors(Inspector!Object[] inspectors) @safe nothrow pure {
                this.inspectors_ = inspectors;

                return this;
            }

            /**
            Get inspectors

            Returns:
                Inspector!Object[]
            **/
            inout(Inspector!Object[]) inspectors() @safe nothrow pure inout {
                return this.inspectors_;
            }

        }

        void map(Object from, ref Object to, RCIAllocator allocator = theAllocator) const {
            auto accessors = this.accessors.filter!(accessor => accessor.componentType(from) is from.identify);
            auto setters = this.setters.filter!(setter => setter.componentType(to) is to.identify);
            auto fromInspectors = this.inspectors.filter!(inspector => inspector.typeOf(from) is from.identify);
            auto toInspectors = this.inspectors.filter!(inspector => inspector.typeOf(to) is to.identify);

            enforce!InvalidArgumentException(!accessors.empty, text("No field accessor for ", from.identify, " has been provided, cannot map to ", to.identify));
            enforce!InvalidArgumentException(!setters.empty, text("No field setter for ", to.identify, " has been provided, cannot map from ", from.identify));
            enforce!InvalidArgumentException(!fromInspectors.empty, text("No inspector for ", from.identify, " has been provided, cannot map to ", to.identify));
            enforce!InvalidArgumentException(!toInspectors.empty, text("No inspector for ", to.identify, " has been provided, cannot map from ", to.identify));

            import std.stdio;
            writeln(to.identify);
            auto mapper = this.factory()(
                accessors.front,
                setters.front,
                fromInspectors.front,
                toInspectors.front
            );

            mapper.map(from, to, allocator);

            this.destructor()(mapper);
        }

    }
}