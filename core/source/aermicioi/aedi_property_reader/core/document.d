/**
License:
    Boost Software License - Version 1.0 - August 17th, 2003

    Permission is hereby granted, free of charge, to any person or organization
    obtaining a copy of the software and accompanying documentation covered by
    this license (the "Software") to use, reproduce, display, distribute,
    execute, and transmit the Software, and to prepare derivative works of the
    Software, and to permit third-parties to whom the Software is furnished to
    do so, all subject to the following:

    The copyright notices in the Software and this entire statement, including
    the above license grant, this restriction and the following disclaimer,
    must be included in all copies of the Software, in whole or in part, and
    all derivative works of the Software, unless such copies or derivative
    works are solely in the form of machine-executable object code generated by
    a source language processor.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
    SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
    FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
    ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.

Authors:
    Alexandru Ermicioi
**/
module aermicioi.aedi_property_reader.core.document;

import aermicioi.aedi : Container, AediAllocatorAware = AllocatorAware, component, autowired, AllocatorAwareMixin, AediNotFoundException = NotFoundException;
import aermicioi.aedi_property_reader.convertor.exception : ConvertorException;
import aermicioi.aedi_property_reader.convertor.convertor;
import aermicioi.aedi_property_reader.convertor.placeholder;
import aermicioi.aedi.storage.wrapper;
import std.meta;
import std.conv;
import std.experimental.allocator;
import std.exception : enforce;
import aermicioi.aedi_property_reader.convertor.accessor;
import aermicioi.aedi_property_reader.convertor.type_guesser;
import std.algorithm;
import std.array;
import std.experimental.logger;
import std.traits : Unqual;

/**
Locator for properties that weren't registered in container, however are present in the root document.

Since the type of the properties is not known at the runtime,
this locator will employ a type guesser to guess the type of element
it is requested from root document. If guessing fails, then raw type will
be returned per type guesser semantics.
**/
@component
@safe class DocumentLocator(DocumentType) : Container, AediAllocatorAware!()
{

    private {
        Convertor convertor_;
        PropertyAccessor!(DocumentType, Object) accessor_;
        TypeGuesser!Object guesser_;
        Object[string] components;

        TypeWrapper document;
    }

    mixin AllocatorAwareMixin!(typeof(this));

    public {

        /**
        Constructor for a container for document.

        Params:
            document = document stored in container.
            convertor = convertor storing any other one registered in document container.
        **/
        @autowired
        this(DocumentType document, RCIAllocator allocator = theAllocator) {
            this.document = TypeWrapper(document);
            this.allocator = allocator;
        }

        @property {

            /**
            Set convertor

            Params:
                convertor = combined convertor used in converting from type to another

            Returns:
                typeof(this)
            **/
            @autowired
            typeof(this) convertor(Convertor convertor) @safe nothrow pure {
                this.convertor_ = convertor;

                return this;
            }

            /**
            Get convertor

            Returns:
                CombinedConvertor
            **/
            inout(Convertor) convertor() @safe nothrow pure inout {
                return this.convertor_;
            }

            /**
            Set guesser

            Params:
                guesser = guesser uset to guess the D type of document.

            Returns:
                typeof(this)
            **/
            @autowired
            typeof(this) guesser(TypeGuesser!Object guesser) @safe nothrow pure {
                this.guesser_ = guesser;

                return this;
            }

            /**
            Get guesser

            Returns:
                TypeGuesser!Object
            **/
            inout(TypeGuesser!Object) guesser() @safe nothrow pure inout {
                return this.guesser_;
            }

            /**
            Set accessor

            Params:
                accessor = accessor used to navigate through document
            Returns:
                typeof(this)
            **/
            @autowired
            typeof(this) accessor(PropertyAccessor!(DocumentType, Object) accessor) @safe nothrow pure {
                this.accessor_ = accessor;

                return this;
            }

            /**
            Get accessor

            Returns:
                PropertyAccessor!(DocumentType, Object)
            **/
            inout(PropertyAccessor!(DocumentType, Object)) accessor() @safe nothrow pure inout {
                return this.accessor_;
            }
        }

        /**
		Get a component that is associated with key.

		Params:
			identity = the element id.

		Throws:
			NotFoundException in case if the element wasn't found.

		Returns:
			Object element if it is available.
		**/
        Object get(string identity) @trusted {
            debug(trace) trace("Searching for \"", identity, '"');

            if (identity in components) {
                debug(trace) trace("Found already converted component, supplying it.");

                return components[identity];
            }

            if (!this.accessor.has(this.document.payload, identity)) {
                throw new AediNotFoundException(
                    text("Could not find ${identity} in document of type ", typeid(DocumentType)), identity
                );
            }

            Object document = this.accessor.access(this.document.payload, identity);

            debug(trace) trace("Attempting to guess the desired type.");
            TypeInfo guess = this.guesser.guess(document);

            debug(trace) trace("Guessed ", guess, " type, commencing conversion");
            return convertor.convert(document, guess, this.allocator);
        }

        /**
        Check if an element is present in Locator by key id.

        Note:
        	This check should be done for elements that locator actually contains, and
        	not in chained locator.
        Params:
        	identity = identity of element.

    	Returns:
    		bool true if an element by key is present in Locator.
        **/
        bool has(string identity) inout @trusted {
            return (identity in components) || this.accessor.has((cast(TypeWrapper) this.document).payload, identity);
        }

        /**
        Sets up the internal state of container.

        Sets up the internal state of container (Ex, for singleton container it will spawn all objects that locator contains).
        **/
        typeof(this) instantiate() {
            return this;
        }

        /**
        Destruct all managed components.

        Destruct all managed components. The method denotes the end of container lifetime, and therefore destruction of all managed components
        by it.
        **/
        typeof(this) terminate() @trusted {
            foreach (id, component; this.components) {
                this.convertor.destruct(null, component, allocator);
            }

            return this;
        }
    }

    private {
        /**
        A dirty hack used to evade tagged algebraic or any other
        custom implementation of cast while stripping out constness/immutability of the payload in has method
        **/
        static struct TypeWrapper {
            DocumentType payload;
        }
    }
}